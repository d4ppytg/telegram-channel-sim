document.addEventListener('DOMContentLoaded', () => {
    const tg = window.Telegram.WebApp;

    // –≠–∫—Ä–∞–Ω—ã –∏ –æ–≤–µ—Ä–ª–µ–∏
    const preloader = document.getElementById('preloader');
    const themeSelectionScreen = document.getElementById('theme-selection-screen');
    const welcomeScreen = document.getElementById('welcome-screen');
    const cutsceneScreen = document.getElementById('cutscene-screen');
    
    const gameInterface = document.getElementById('game-interface'); // –ì–ª–∞–≤–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    const gameScreensContainer = document.getElementById('game-screens-container'); // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
    const allGameScreens = gameScreensContainer ? gameScreensContainer.querySelectorAll('.game-screen') : [];
    // –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã-–≤–∫–ª–∞–¥–∫–∏
    const studioScreen = document.getElementById('studioScreen');
    // const createPostScreen = document.getElementById('createPostScreen'); // –£–∂–µ –µ—Å—Ç—å –≤ allGameScreens
    // const upgradesScreen = document.getElementById('upgradesScreen'); // –£–∂–µ –µ—Å—Ç—å –≤ allGameScreens
    // const rankingsScreen = document.getElementById('rankingsScreen'); // –£–∂–µ –µ—Å—Ç—å –≤ allGameScreens
    
    const startGameButton = document.getElementById('start-game-button');
    const cutsceneSlides = cutsceneScreen ? cutsceneScreen.querySelectorAll('.cutscene-slide') : [];
    let currentSlideIndex = 0;
    const telegramUsernameDisplay = document.getElementById('telegram-username-display');
    const userPhotoEl = document.getElementById('user-photo');

    const characterEl = document.getElementById('character-sprite');
    let characterStateTimeout; 

    // –≠–ª–µ–º–µ–Ω—Ç—ã —Ö–µ–¥–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å –æ–±—â–∏–π –¥–ª—è game-interface
    const subscribersCountEl = document.getElementById('subscribers-count');
    const balanceCountEl = document.getElementById('balance-count');
    const audienceMoodDisplay = document.getElementById('audience-mood-display');
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã –≤–∫–ª–∞–¥–∫–∏ "–°—Ç—É–¥–∏—è"
    const channelNameOnMonitorEl = document.getElementById('channel-name-on-monitor');
    const gameVersionEl = document.getElementById('game-version'); 
    const currentTrendDisplayMonitor = document.getElementById('current-trend-display-monitor');
    const trendDescriptionMonitorEl = document.getElementById('trend-description-monitor');
    const goToCreatePostTabButton = document.getElementById('go-to-create-post-tab'); 
    const studioSidePanel = document.getElementById('studio-side-panel'); 
    const openLogButton = document.getElementById('open-log-button');
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã –≤–∫–ª–∞–¥–∫–∏ "–°–æ–∑–¥–∞—Ç—å"
    const postTextButton = document.querySelector('#createPostScreen #post-text-button');
    const postMemeButton = document.querySelector('#createPostScreen #post-meme-button');
    const postVideoButton = document.querySelector('#createPostScreen #post-video-button');
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã –≤–∫–ª–∞–¥–∫–∏ "–£–ª—É—á—à–µ–Ω–∏—è"
    const upgradeContentQualityButton = document.querySelector('#upgradesScreen #upgrade-content-quality');
    const upgradeCostSpan = document.querySelector('#upgradesScreen .upgrade-cost'); // –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
    
    // –û–±—â–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –∏ –∏—Ö —ç–ª–µ–º–µ–Ω—Ç—ã
    const logModal = document.getElementById('log-modal');
    const closeModalButtons = document.querySelectorAll('.close-modal-button');
    const eventLogUl = document.getElementById('event-log');

    // –í—Å–ø–ª—ã–≤–∞—é—â–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    const liveFeedbackContainer = document.getElementById('live-feedback-container');
    const MAX_FEEDBACK_ITEMS = 7;
    const positiveComments = ["–ö—Ä—É—Ç–æ!", "–õ—É—á—à–∏–π –ø–æ—Å—Ç!", "–û–≥–æ–Ω—å üî•", "–õ—é–±–ª—é!", "–ü–æ–¥–ø–∏—Å–∫–∞!", "üëçüëçüëç", "–ì–µ–Ω–∏–∞–ª—å–Ω–æ!"];
    const neutralComments = ["–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ.", "–ù–µ–ø–ª–æ—Ö–æ.", "–ü–æ–π–¥–µ—Ç.", "–ù–æ—Ä–º.", "ü§î", "–û–∫."];
    const negativeComments = ["–ß—Ç–æ —ç—Ç–æ?", "–°–∫—É—á–Ω–æ.", "–û—Ç–ø–∏—Å–∫–∞.", "üëé", "–ù–µ –ø–æ–Ω—è–ª.", "–£–∂–∞—Å."];
    const reactionEmojis = ['‚ù§Ô∏è', 'üòÇ', 'üéâ', 'ü§Ø', 'üëÄ', 'üíØ'];

    const navButtons = document.querySelectorAll('.bottom-nav .nav-button');

    tg.ready();
    tg.expand();

    let defaultGameState = {
        channelName: "–ú–æ–π –ö–∞–Ω–∞–ª", subscribers: 0, balance: 100, engagementRate: 0,
        audienceMood: 75, contentQualityMultiplier: 1, postsMade: 0,
        gameVersion: "0.9.0", 
        theme: null, themeModifiers: { text: 1, meme: 1, video: 1 },
        currentTrend: null, trendPostsRemaining: 0,
    };
    let gameState = { ...defaultGameState };

    const CHARACTER_STATES = { IDLE_BLINKING: 'idle_blinking', TYPING: 'typing', HAPPY: 'happy', SLEEPING: 'sleeping' };

    function setCharacterState(newState, durationMs = 0) {
        if (!characterEl) return;
        clearTimeout(characterStateTimeout);
        characterEl.className = ''; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã
        switch (newState) {
            case CHARACTER_STATES.IDLE_BLINKING: characterEl.classList.add('char-anim-idle-blink'); break;
            case CHARACTER_STATES.TYPING: characterEl.classList.add('char-state-typing'); break;
            case CHARACTER_STATES.HAPPY:
                characterEl.classList.add('char-state-happy');
                if (durationMs > 0) {
                    characterStateTimeout = setTimeout(() => setCharacterState(CHARACTER_STATES.IDLE_BLINKING), durationMs);
                }
                break;
            case CHARACTER_STATES.SLEEPING: characterEl.classList.add('char-state-sleeping'); break;
            default: characterEl.classList.add('char-anim-idle-blink'); break;
        }
    }

    function showTopLevelScreen(screenElementToShow) {
        [preloader, themeSelectionScreen, welcomeScreen, cutsceneScreen, gameInterface].forEach(el => {
            if (el) { el.classList.remove('visible'); el.style.display = 'none';}
        });
        if (screenElementToShow) {
            screenElementToShow.style.display = 'flex'; 
            requestAnimationFrame(() => { requestAnimationFrame(() => { screenElementToShow.classList.add('visible'); }); });
        }
    }

    function setActiveGameScreen(targetScreenId) {
        allGameScreens.forEach(screen => {
            const isActive = screen.id === targetScreenId;
            screen.style.display = isActive ? 'flex' : 'none';
            screen.classList.toggle('active-screen', isActive);
        });
        navButtons.forEach(button => {
            button.classList.toggle('active', button.dataset.targetScreen === targetScreenId);
        });
        if (studioSidePanel) {
            studioSidePanel.style.display = (targetScreenId === 'studioScreen') ? 'flex' : 'none';
        }
        if(gameScreensContainer) gameScreensContainer.scrollTop = 0;
    }
    
    function playCutscene() { 
        showTopLevelScreen(cutsceneScreen); currentSlideIndex = 0;
        if (cutsceneSlides.length > 0 && cutsceneSlides[0]) { // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
             cutsceneSlides[0].style.display = 'flex'; cutsceneSlides[0].classList.add('active'); 
        }
        setTimeout(showNextSlide, 3000);
    }
    function showNextSlide() {
        if (currentSlideIndex < cutsceneSlides.length && cutsceneSlides[currentSlideIndex]) { 
            cutsceneSlides[currentSlideIndex].classList.remove('active');
            if (currentSlideIndex > 0 && cutsceneSlides[currentSlideIndex - 1]) { 
                setTimeout(() => { if (cutsceneSlides[currentSlideIndex - 1]) cutsceneSlides[currentSlideIndex - 1].style.display = 'none'; }, 500); 
            }
        }
        currentSlideIndex++;
        if (currentSlideIndex < cutsceneSlides.length && cutsceneSlides[currentSlideIndex]) { 
            cutsceneSlides[currentSlideIndex].style.display = 'flex'; 
            cutsceneSlides[currentSlideIndex].classList.add('active'); 
            setTimeout(showNextSlide, 3000); 
        } else { startGameplay(); }
    }
    
    function initializeGameFlow() { 
        const savedState = localStorage.getItem('channelSimGameState_v9'); 
        if (savedState) { const parsedState = JSON.parse(savedState); gameState = { ...defaultGameState, ...parsedState }; if (gameState.theme) { showWelcomeScreen(); return; } }
        gameState = { ...defaultGameState }; saveGame(); showThemeSelectionScreen();
    }
    function showThemeSelectionScreen() { logEvent("–¢—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–±–æ—Ä —Ç–µ–º–∞—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞.", "info"); showTopLevelScreen(themeSelectionScreen); }
    function showWelcomeScreen() { 
        const userData = tg.initDataUnsafe?.user;
        if (userData) {
            if (telegramUsernameDisplay) telegramUsernameDisplay.textContent = userData.username ? `@${userData.username}` : (userData.first_name || '–ò–≥—Ä–æ–∫');
            if (userPhotoEl && userData.photo_url) userPhotoEl.src = userData.photo_url;
            else if (userPhotoEl) userPhotoEl.src = 'placeholder-avatar.png';
        } else {
            if (telegramUsernameDisplay) telegramUsernameDisplay.textContent = '–ì–æ—Å—Ç—å';
            if (userPhotoEl) userPhotoEl.src = 'placeholder-avatar.png';
        }
        showTopLevelScreen(welcomeScreen); 
    }
    function startGameplay() { 
        loadGame(); 
        showTopLevelScreen(gameInterface); 
        setActiveGameScreen('studioScreen'); 
        setCharacterState(CHARACTER_STATES.IDLE_BLINKING);
        logEvent(`–ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞! –ö–∞–Ω–∞–ª: ${gameState.channelName}.`, "info");
    }

    function loadGame() { 
        const savedState = localStorage.getItem('channelSimGameState_v9');
        if (savedState) { const parsedState = JSON.parse(savedState); gameState = { ...defaultGameState, ...parsedState };}
        if (gameVersionEl) gameVersionEl.textContent = `v${gameState.gameVersion}`;
        updateUI(); updateTrendUI(); checkUpgradeButtonStatus();
    }
    function saveGame() { localStorage.setItem('channelSimGameState_v9', JSON.stringify(gameState)); }
    function logEvent(message, type = 'info') { 
        if (!eventLogUl) return;
        const listItem = document.createElement('li');
        const time = new Date().toLocaleTimeString([], {hour:'2-digit',minute:'2-digit',second:'2-digit'});
        listItem.textContent = `[${time}] ${message}`;
        listItem.className = `log-${type}`;
        eventLogUl.prepend(listItem);
        if (eventLogUl.children.length > 30) eventLogUl.removeChild(eventLogUl.lastChild);
     }
    function updateUI() { 
        const displayName = gameState.channelName || `–ö–∞–Ω–∞–ª [${getThemeDisplayName(gameState.theme)}]`;
        if (channelNameOnMonitorEl) channelNameOnMonitorEl.textContent = displayName;
        if (subscribersCountEl) subscribersCountEl.textContent = gameState.subscribers;
        if (balanceCountEl) balanceCountEl.textContent = gameState.balance.toFixed(0);
        if (audienceMoodDisplay) audienceMoodDisplay.textContent = gameState.audienceMood.toFixed(0);
        updateTrendUI();
    }
    function checkUpgradeButtonStatus() { 
        if (!upgradeContentQualityButton) return;
        const cost = parseInt(upgradeContentQualityButton.dataset.cost);
        upgradeContentQualityButton.disabled = gameState.balance < cost;
        if (upgradeCostSpan) upgradeCostSpan.textContent = cost;
    }
    function updateTrendUI() { 
        if (gameState.currentTrend && gameState.trendPostsRemaining > 0) {
            if (trendDescriptionMonitorEl) trendDescriptionMonitorEl.textContent = `${gameState.currentTrend.topic} (${getPostTypeName(gameState.currentTrend.type)}) Bonus x${gameState.currentTrend.bonus}, ${gameState.trendPostsRemaining} –ø.`;
            if (currentTrendDisplayMonitor) currentTrendDisplayMonitor.style.display = 'block';
        } else {
            if (currentTrendDisplayMonitor) currentTrendDisplayMonitor.style.display = 'none';
        }
    }
    function generateNewTrend() { 
        const trendTypes = ['text', 'meme', 'video'];
        const trendTopics = { text: ["–ì–æ—Ä—è—á–∏–µ –Ω–æ–≤–æ—Å—Ç–∏", "–°–æ–≤–µ—Ç—ã", "–ê–Ω–∞–ª–∏–∑"], meme: ["–ú–µ–º—ã", "–Æ–º–æ—Ä", "–ñ–∏–≤–æ—Ç–Ω—ã–µ"], video: ["–û–±–∑–æ—Ä—ã", "–ö–æ—Ç–∏–∫–∏", "–õ–∞–π—Ñ—Ö–∞–∫–∏"] };
        const randomType = trendTypes[Math.floor(Math.random() * trendTypes.length)];
        const randomTopic = trendTopics[randomType][Math.floor(Math.random() * trendTopics[randomType].length)];
        gameState.currentTrend = { type: randomType, topic: randomTopic, bonus: (Math.random() * 0.5 + 1.3).toFixed(1) };
        gameState.trendPostsRemaining = Math.floor(Math.random() * 3) + 3;
        logEvent(`–ù–æ–≤—ã–π —Ç—Ä–µ–Ω–¥! ${randomTopic} (${getPostTypeName(randomType)}) —Å–µ–π—á–∞—Å –ø–æ–ø—É–ª—è—Ä–Ω—ã! –ë–æ–Ω—É—Å x${gameState.currentTrend.bonus} –Ω–∞ ${gameState.trendPostsRemaining} –ø–æ—Å—Ç–æ–≤.`, 'warning');
    }
    function getThemeDisplayName(themeKey) { const n = { news: '–ù–æ–≤–æ—Å—Ç–∏', entertainment: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', education: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', tech: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'}; return n[themeKey] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è'; }
    function getPostTypeName(typeKey) { const n = { text: '–¢–µ–∫—Å—Ç—ã', meme: '–ú–µ–º—ã', video: '–í–∏–¥–µ–æ'}; return n[typeKey] || typeKey; }

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    navButtons.forEach(button => {
        button.addEventListener('click', () => {
            setActiveGameScreen(button.dataset.targetScreen);
        });
    });
    if(goToCreatePostTabButton) goToCreatePostTabButton.addEventListener('click', () => {
        setActiveGameScreen('createPostScreen');
    });

    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ª–æ–≥–∞
    function openModal(modalElement) { if (modalElement) { modalElement.style.display = 'flex'; requestAnimationFrame(() => modalElement.classList.add('visible')); } }
    function closeModal(modalElement) { if (modalElement) { modalElement.classList.remove('visible'); setTimeout(() => { modalElement.style.display = 'none'; }, 300); } }
    if(openLogButton) openLogButton.addEventListener('click', () => openModal(logModal));
    closeModalButtons.forEach(button => { button.addEventListener('click', () => { const modalId = button.dataset.modalId; const modalToClose = document.getElementById(modalId); closeModal(modalToClose); }); });

    // –í—Å–ø–ª—ã–≤–∞—é—â–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    function showFeedback(text, isEmoji = false, username = null) {
        if (!liveFeedbackContainer) return;
        const feedbackEl = document.createElement('div');
        feedbackEl.classList.add('feedback-item');
        let content = '';
        if (username) {
            const userSpan = document.createElement('span');
            userSpan.classList.add('username'); userSpan.textContent = `@${username}:`;
            feedbackEl.appendChild(userSpan);
        }
        const textSpan = document.createElement('span');
        textSpan.textContent = text;
        if (isEmoji) textSpan.classList.add('emoji');
        feedbackEl.appendChild(textSpan);
        liveFeedbackContainer.appendChild(feedbackEl);
        if (liveFeedbackContainer.children.length > MAX_FEEDBACK_ITEMS) liveFeedbackContainer.firstChild.remove();
        setTimeout(() => {
            feedbackEl.classList.add('fade-out');
            setTimeout(() => { if (feedbackEl.parentNode) feedbackEl.remove(); }, 500);
        }, 4000 + Math.random() * 2000);
    }

    // –î–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä—ã
    function handlePostAction(postType, baseSubMin, baseSubMax, baseMoneyMin, baseMoneyMax, erMin, erMax) {
        setCharacterState(CHARACTER_STATES.TYPING); 
        setTimeout(() => {
            const themeModKey = postType; const themeMod = gameState.themeModifiers[themeModKey] || 1;
            const moodMultiplier = 0.8 + (gameState.audienceMood / 100) * 0.4; let trendBonusMultiplier = 1;
            if (gameState.currentTrend && gameState.currentTrend.type === postType && gameState.trendPostsRemaining > 0) { trendBonusMultiplier = parseFloat(gameState.currentTrend.bonus); gameState.audienceMood = Math.min(gameState.audienceMood + 5, 100); logEvent(`–ü–æ—Å—Ç "${getPostTypeName(postType)}" –ø–æ–ø–∞–ª –≤ —Ç—Ä–µ–Ω–¥! –ë–æ–Ω—É—Å x${trendBonusMultiplier}!`, 'info');}
            const subGain = Math.floor((Math.random() * (baseSubMax - baseSubMin + 1) + baseSubMin) * gameState.contentQualityMultiplier * themeMod * moodMultiplier * trendBonusMultiplier);
            const moneyGain = Math.floor((Math.random() * (baseMoneyMax - baseMoneyMin + 1) + baseMoneyMin) * gameState.contentQualityMultiplier);
            gameState.subscribers += subGain; gameState.balance += moneyGain; gameState.postsMade++;
            let moodChange = 0; if (subGain > 2) moodChange = Math.floor(gameState.contentQualityMultiplier * 1.5); else if (subGain < 0 && gameState.subscribers > 0) moodChange = -5; gameState.audienceMood = Math.min(Math.max(gameState.audienceMood + moodChange, 0), 100);
            if (gameState.audienceMood < 30 && gameState.subscribers > 10) { const uC = (30 - gameState.audienceMood) / 30; if (Math.random() < uC * 0.05) { const unsub = Math.min(gameState.subscribers, Math.floor(Math.random()*(gameState.subscribers*0.03)+1)); gameState.subscribers -= unsub; logEvent(`–ê—É–¥–∏—Ç–æ—Ä–∏—è –Ω–µ–¥–æ–≤–æ–ª—å–Ω–∞! –û—Ç–ø–∏—Å–∞–ª–æ—Å—å ${unsub} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.`, 'error'); gameState.audienceMood = Math.max(gameState.audienceMood - 3, 0);}}
            logEvent(`–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω ${getPostTypeName(postType)}! +${subGain} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, +$${moneyGain}.`, 'success');
            if (gameState.currentTrend && gameState.trendPostsRemaining > 0) { gameState.trendPostsRemaining--; }
            if ((!gameState.currentTrend || gameState.trendPostsRemaining <= 0) && gameState.postsMade > 2) { if (Math.random() < 0.20) { generateNewTrend(); }}
            
            if (subGain > 8) { setCharacterState(CHARACTER_STATES.HAPPY, 3000); } else { setCharacterState(CHARACTER_STATES.IDLE_BLINKING); }
            updateUI(); saveGame(); checkUpgradeButtonStatus();
            tg.HapticFeedback.notificationOccurred('success');
            
            const feedbackCount = Math.floor(Math.random() * 3) + 2; 
            for (let i = 0; i < feedbackCount; i++) { setTimeout(() => { const rU = `User${Math.floor(Math.random()*1000)}`; if(Math.random()<0.3){showFeedback(reactionEmojis[Math.floor(Math.random()*reactionEmojis.length)],true,rU);}else{let cA;if(gameState.audienceMood>70&&subGain>5)cA=positiveComments;else if(gameState.audienceMood<40||subGain<1)cA=negativeComments;else cA=neutralComments;showFeedback(cA[Math.floor(Math.random()*cA.length)],false,rU);}},i*(Math.random()*500+300));}
            setActiveGameScreen('studioScreen'); 
        }, 700); 
    }

     if(postTextButton) postTextButton.addEventListener('click', () => handlePostAction('text', 1, 5, 2, 10, 1, 5));
     if(postMemeButton) postMemeButton.addEventListener('click', () => handlePostAction('meme', 3, 10, 1, 5, 2, 8));
     if(postVideoButton) postVideoButton.addEventListener('click', () => handlePostAction('video', 8, 20, 7, 18, 3, 10));
     if(upgradeContentQualityButton) upgradeContentQualityButton.addEventListener('click', () => { 
        const cost = parseInt(upgradeContentQualityButton.dataset.cost);
        if (gameState.balance >= cost) {
            gameState.balance -= cost; gameState.contentQualityMultiplier = parseFloat((gameState.contentQualityMultiplier + 0.2).toFixed(1));
            const newCost = Math.floor(cost * 1.5); upgradeContentQualityButton.dataset.cost = newCost;
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–∞–º–æ–π –∫–Ω–æ–ø–∫–µ (–µ—Å–ª–∏ –æ–Ω–∞ –æ–¥–Ω–∞) –∏–ª–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —É–ª—É—á—à–µ–Ω–∏—è
            const buttonTextContainer = upgradeContentQualityButton.querySelector('h4') ? upgradeContentQualityButton.parentNode.querySelector('h4') : upgradeContentQualityButton; // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º—Å—è
            if(upgradeContentQualityButton.querySelector('.upgrade-cost')) upgradeContentQualityButton.querySelector('.upgrade-cost').textContent = newCost;
            else upgradeContentQualityButton.textContent = `–£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–°—Ç–æ–∏–º–æ—Å—Ç—å: $${newCost})`; // Fallback
            
            logEvent(`–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É–ª—É—á—à–µ–Ω–æ! –ú–Ω–æ–∂–∏—Ç–µ–ª—å: ${gameState.contentQualityMultiplier}x.`, 'success');
            gameState.audienceMood = Math.min(gameState.audienceMood + 2, 100);
            updateUI(); saveGame(); checkUpgradeButtonStatus();
            tg.HapticFeedback.impactOccurred('medium');
            setCharacterState(CHARACTER_STATES.HAPPY, 1500); 
        } else { logEvent("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.", 'error'); tg.HapticFeedback.notificationOccurred('error');}
     });

    if (themeSelectionScreen) {
        const themeCards = themeSelectionScreen.querySelectorAll('.theme-card');
        themeCards.forEach(card => {
            card.addEventListener('click', () => {
                const selectedTheme = card.dataset.theme; gameState.theme = selectedTheme; gameState.audienceMood = 75;
                switch(selectedTheme) { 
                    case 'news': gameState.themeModifiers = { text: 1.2, meme: 0.8, video: 1.1 }; gameState.channelName = "–ù–æ–≤–æ—Å—Ç–Ω–æ–π –í–µ—Å—Ç–Ω–∏–∫"; gameState.balance = 110; break;
                    case 'entertainment': gameState.themeModifiers = { text: 0.9, meme: 1.5, video: 1.2 }; gameState.channelName = "–í–µ—Å–µ–ª—ã–π –£–≥–æ–ª–æ–∫"; break;
                    case 'education': gameState.themeModifiers = { text: 1.3, meme: 0.7, video: 1.0 }; gameState.channelName = "–ê–∫–∞–¥–µ–º–∏—è –ó–Ω–∞–Ω–∏–π"; gameState.subscribers = 5; break;
                    case 'tech': gameState.themeModifiers = { text: 1.1, meme: 1.0, video: 1.3 }; gameState.channelName = "–¢–µ—Ö–Ω–æ –ì—É—Ä—É"; break;
                }
                logEvent(`–í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞: ${getThemeDisplayName(selectedTheme)}`, "success"); saveGame(); showWelcomeScreen();
            });
        });
    }
    
    showTopLevelScreen(preloader);
    setTimeout(() => {
        if (preloader) { preloader.classList.remove('visible'); setTimeout(() => { if(preloader) preloader.style.display = 'none'; }, 700); }
        initializeGameFlow();
    }, 2500); 

    if (startGameButton) { startGameButton.addEventListener('click', () => { if (welcomeScreen) { welcomeScreen.classList.remove('visible'); setTimeout(() => { welcomeScreen.style.display = 'none'; playCutscene(); }, 500); }});}
    
    if (tg.BackButton) {
        tg.BackButton.show();
        tg.BackButton.onClick(() => {
            const visibleModal = logModal && logModal.classList.contains('visible') ? logModal : null; // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –º–æ–¥–∞–ª–∫—É –ª–æ–≥–∞
            if (visibleModal) { closeModal(visibleModal); }
            else if (gameInterface && gameInterface.classList.contains('visible')) { 
                // –ï—Å–ª–∏ –º—ã –Ω–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ "–°—Ç—É–¥–∏—è", —Ç–æ —Å–Ω–∞—á–∞–ª–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –Ω–µ–≥–æ
                const currentActiveScreen = document.querySelector('.game-screen.active-screen');
                if (currentActiveScreen && currentActiveScreen.id !== 'studioScreen') {
                    setActiveGameScreen('studioScreen');
                } else { // –ï—Å–ª–∏ –º—ã —É–∂–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Å—Ç—É–¥–∏–∏, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º
                    saveGame(); logEvent("–í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã (–ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω).", "info"); tg.close();
                }
            }
            else if (cutsceneScreen && cutsceneScreen.classList.contains('visible')) { tg.close(); }
            else if (welcomeScreen && welcomeScreen.classList.contains('visible')) { tg.close(); }
            else if (themeSelectionScreen && themeSelectionScreen.classList.contains('visible')) { tg.close(); }
            else { tg.close(); }
        });
    }
});
