document.addEventListener('DOMContentLoaded', () => {
    console.log("DEBUG: DOMContentLoaded - Script execution started (Focus Clickable Buttons).");
    const tg = window.Telegram.WebApp;

    // --- DOM Element Variables ---
    // (–í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM, –∫–∞–∫ –≤ –≤–∞—à–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ–ª–Ω–æ–º script.js)
    // ... –Ø –Ω–µ –±—É–¥—É –∏—Ö –∑–¥–µ—Å—å –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏, –Ω–æ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–¥–µ—Å—å ...
    // –≠–∫—Ä–∞–Ω—ã –∏ –æ–≤–µ—Ä–ª–µ–∏
    const preloader = document.getElementById('preloader');
    const themeSelectionScreen = document.getElementById('theme-selection-screen');
    const welcomeScreen = document.getElementById('welcome-screen');
    const cutsceneScreen = document.getElementById('cutscene-screen');
    const gameInterface = document.getElementById('game-interface');
    const gameScreensContainer = document.getElementById('game-screens-container');
    const allGameScreens = gameScreensContainer ? gameScreensContainer.querySelectorAll('.game-screen') : [];
    
    const startGameButton = document.getElementById('start-game-button');
    const cutsceneSlides = cutsceneScreen ? cutsceneScreen.querySelectorAll('.cutscene-slide') : [];
    let currentSlideIndex = 0;
    const telegramUsernameDisplay = document.getElementById('telegram-username-display');
    const userPhotoEl = document.getElementById('user-photo');

    const characterEl = document.getElementById('character-sprite');
    let characterStateTimeout; 

    const subscribersCountEl = document.getElementById('subscribers-count');
    const balanceCountEl = document.getElementById('balance-count');
    const audienceMoodDisplay = document.getElementById('audience-mood-display');
    
    const channelNameOnMonitorEl = document.getElementById('channel-name-on-monitor');
    const gameVersionEl = document.getElementById('game-version'); 
    const currentTrendDisplayMonitor = document.getElementById('current-trend-display-monitor');
    const trendDescriptionMonitorEl = document.getElementById('trend-description-monitor');
    
    const studioSidePanel = document.getElementById('studio-side-panel'); 
    const openLogButton = document.getElementById('open-log-button');
    const logModal = document.getElementById('log-modal');
    const closeModalButtons = document.querySelectorAll('.close-modal-button');
    const eventLogUl = document.getElementById('event-log');

    const initiatePostCreationButton = document.getElementById('initiate-post-creation-button');
    const monitorSteps = { /* ... */ }; // –ö–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –∫–æ–¥–µ
    const monitorPostTypeButtons = monitorSteps.selectType ? monitorSteps.selectType.querySelectorAll('.monitor-button') : [];
    const effortSlider = document.getElementById('effort-slider');
    const effortLevelDisplay = document.getElementById('effort-level-display');
    const selectedThemeNameDisplay = monitorSteps.qualityText ? monitorSteps.qualityText.querySelector('.selected-theme-name-monitor') : null;
    const monitorPublishButton = monitorSteps.qualityText ? monitorSteps.qualityText.querySelector('.monitor-publish-button') : null;
    const monitorCancelButtons = document.querySelectorAll('#monitor-content-area .monitor-cancel-button');
    const monitorBackButtons = document.querySelectorAll('#monitor-content-area .monitor-back-button');
    
    const navButtons = document.querySelectorAll('.bottom-nav .nav-button');
    const upgradeContentQualityButton = document.querySelector('#upgradesScreen #upgrade-content-quality');
    const upgradeCostSpan = upgradeContentQualityButton ? upgradeContentQualityButton.querySelector('.upgrade-cost') : null;
    
    const liveFeedbackContainer = document.getElementById('live-feedback-container');


    // --- Game State & Constants ---
    const MAX_FEEDBACK_ITEMS = 7;
    const positiveComments = ["–ö—Ä—É—Ç–æ!", "–õ—É—á—à–∏–π!", "–û–≥–æ–Ω—å üî•", "–õ—é–±–ª—é!", "–ü–æ–¥–ø–∏—Å–∫–∞!", "üëçüëçüëç", "–ì–µ–Ω–∏–π!"];
    const neutralComments = ["–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ.", "–ù–µ–ø–ª–æ—Ö–æ.", "–ü–æ–π–¥–µ—Ç.", "–ù–æ—Ä–º.", "ü§î", "–û–∫."];
    const negativeComments = ["–ß—Ç–æ —ç—Ç–æ?", "–°–∫—É—á–Ω–æ.", "–û—Ç–ø–∏—Å–∫–∞.", "üëé", "–ù–µ –ø–æ–Ω—è–ª.", "–£–∂–∞—Å."];
    const reactionEmojis = ['‚ù§Ô∏è', 'üòÇ', 'üéâ', 'ü§Ø', 'üëÄ', 'üíØ'];
    const CHARACTER_STATES = { IDLE_BLINKING: 'idle_blinking', TYPING: 'typing', HAPPY: 'happy', SLEEPING: 'sleeping' };
    
    let currentPostCreation = { type: null, themeId: null, effort: 2 };
    let defaultGameState = {
        channelName: "–ú–æ–π –ö–∞–Ω–∞–ª", subscribers: 0, balance: 100, engagementRate: 0,
        audienceMood: 75, contentQualityMultiplier: 1, postsMade: 0,
        gameVersion: "1.0.4_clickFixAttempt", 
        theme: null, themeModifiers: { text: 1, meme: 1, video: 1 },
        currentTrend: null, trendPostsRemaining: 0,
    };
    let gameState = { ...defaultGameState };

    if (!tg) { console.error("FATAL: Telegram WebApp SDK (tg) not loaded!"); return; }
    tg.ready();
    tg.expand();
    console.log("DEBUG: Telegram WebApp SDK ready and expanded.");

    function setCharacterState(newState, durationMs = 0) { /* ... –∫–∞–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ–ª–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ ... */ }

    // --- Screen Management (–ö–õ–Æ–ß–ï–í–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ó–î–ï–°–¨) ---
    function showTopLevelScreen(screenElementToShow) {
        console.log("DEBUG: showTopLevelScreen called for:", screenElementToShow ? screenElementToShow.id : "null_element");
        const allTopLevelScreens = [preloader, themeSelectionScreen, welcomeScreen, cutsceneScreen, gameInterface, logModal]; // –í–∫–ª—é—á–∞–µ–º –≤—Å–µ –æ–≤–µ—Ä–ª–µ–∏

        allTopLevelScreens.forEach(el => {
            if (el) {
                if (el === screenElementToShow) {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤–æ–π —ç–∫—Ä–∞–Ω
                    el.style.display = 'flex'; // –ò–ª–∏ 'block' –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –Ω–æ flex –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
                    el.style.opacity = '0'; // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–≥–æ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
                    el.style.visibility = 'visible';
                    el.style.pointerEvents = 'auto'; // –î–µ–ª–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º
                    requestAnimationFrame(() => {
                        el.classList.add('visible'); // –ó–∞–ø—É—Å–∫–∞–µ—Ç CSS transition –¥–ª—è opacity
                        console.log(`DEBUG: ${el.id} MADE VISIBLE, display: ${getComputedStyle(el).display}, opacity: ${getComputedStyle(el).opacity}, pointerEvents: ${getComputedStyle(el).pointerEvents}`);
                    });
                } else {
                    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã
                    el.classList.remove('visible');
                    el.style.pointerEvents = 'none'; // –î–µ–ª–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã –ù–ï –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏
                    // –°–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ opacity –∏ –ø–æ—Ç–æ–º display:none –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
                    if (getComputedStyle(el).opacity === "1") { // –ï—Å–ª–∏ –±—ã–ª –≤–∏–¥–∏–º
                         el.style.opacity = '0';
                         setTimeout(() => { el.style.display = 'none'; }, 400); // –í—Ä–µ–º—è = transition-duration
                    } else {
                         el.style.display = 'none'; // –ï—Å–ª–∏ –∏ —Ç–∞–∫ –±—ã–ª –Ω–µ–≤–∏–¥–∏–º, –ø—Ä–æ—Å—Ç–æ display:none
                    }
                }
            }
        });

        if (!screenElementToShow) {
            console.error("DEBUG: showTopLevelScreen: target element is null or undefined!");
        }
    }

    function setActiveGameScreen(targetScreenId) {
        console.log("DEBUG: setActiveGameScreen called for:", targetScreenId);
        if (!allGameScreens || allGameScreens.length === 0) { console.error("allGameScreens not found or empty!"); return; }
        
        allGameScreens.forEach(screen => {
            if (screen) {
                const isActive = screen.id === targetScreenId;
                screen.style.display = isActive ? 'flex' : 'none'; // –ò–ª–∏ 'block' –¥–ª—è #studioScreen –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                screen.classList.toggle('active-screen', isActive);
                screen.style.pointerEvents = isActive ? 'auto' : 'none'; // –£–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å—é –≤–∫–ª–∞–¥–æ–∫
            }
        });

        if (navButtons) {
            navButtons.forEach(button => {
                if (button) button.classList.toggle('active', button.dataset.targetScreen === targetScreenId);
            });
        }
        if (studioSidePanel) {
            studioSidePanel.style.display = (targetScreenId === 'studioScreen') ? 'flex' : 'none';
        }
        if(gameScreensContainer) gameScreensContainer.scrollTop = 0;
        console.log("DEBUG: Active game screen set to:", targetScreenId);
    }
    
    // --- Cutscene, InitializeGameFlow, ThemeSelection, Welcome, StartGameplay ---
    // –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ, –∫–∞–∫ –≤ –ü–û–°–õ–ï–î–ù–ï–ú –ü–û–õ–ù–û–ú —Å–∫—Ä–∏–ø—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π —è –¥–∞–≤–∞–ª
    // (—Å console.log –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –≤—ã–∑–æ–≤–æ–≤).
    // –ö–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç - initializeGameFlow –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å showThemeSelectionScreen() –ü–†–ê–í–ò–õ–¨–ù–û.
    function playCutscene() { /* ... */ }
    function showNextSlide() { /* ... */ }
    function initializeGameFlow() { /* ... –∫–∞–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ–ª–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ —Å try-catch ... */ 
        console.log("DEBUG: --- initializeGameFlow START ---");
        // ... (–≤—Å—è –ª–æ–≥–∏–∫–∞ —Å localStorage –∏ –≤—ã–∑–æ–≤–æ–º showThemeSelectionScreen –∏–ª–∏ showWelcomeScreen) ...
        // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –∫–æ–Ω—Ü–µ –≤–µ—Ç–∫–∏, –≥–¥–µ —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –µ—Å—Ç—å:
        // console.log("DEBUG: Game saved, NOW attempting to show Theme Selection Screen...");
        // showThemeSelectionScreen();
    }
    function showThemeSelectionScreen() { /* ... –∫–∞–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ–ª–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ ... */ }
    function showWelcomeScreen() { /* ... –∫–∞–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ–ª–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ ... */ }
    function startGameplay() { /* ... –∫–∞–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ–ª–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ ... */ }

    // --- Load/Save/Log/UI Updates ---
    function loadGame() { /* ... */ }
    function saveGame() { localStorage.setItem('channelSimGameState_v13_clickable_focus', JSON.stringify(gameState)); console.log("DEBUG: Game saved."); }
    function logEvent(message, type = 'info') { /* ... */ }
    function updateUI() { /* ... */ }
    function checkUpgradeButtonStatus() { /* ... */ }
    function updateTrendUI() { /* ... */ }
    function generateNewTrend() { /* ... */ }
    function getThemeDisplayName(themeKey) { /* ... */ }
    function getPostTypeName(typeKey) { /* ... */ }

    // --- Interactive Monitor Logic ---
    function showMonitorStep(stepElementToShow) { /* ... –∫–∞–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ–ª–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ ... */ }
    // ... (–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è initiatePostCreationButton, monitorCancelButtons, –∏ —Ç.–¥. –∫–∞–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ–ª–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ) ...

    // --- Navigation & Modals ---
    // ... (–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è navButtons, openModal, closeModal, openLogButton, closeModalButtons –∫–∞–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ–ª–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ) ...

    // --- Live Feedback ---
    function showFeedback(text, isEmoji = false, username = null) { /* ... –∫–∞–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ–ª–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ ... */ }

    // --- Game Actions ---
    function handlePostAction(postType, baseSubMin, baseSubMax, baseMoneyMin, baseMoneyMax, erMin, erMax, effort, themeId) { /* ... –∫–∞–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ–ª–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ ... */ }
    // ... (–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ #createPostScreen, –µ—Å–ª–∏ –æ–Ω–∏ —Ç–∞–º –æ—Å—Ç–∞–ª–∏—Å—å) ...
    // ... (–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è upgradeContentQualityButton) ...

    // --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –í–´–ë–û–†–ê –¢–ï–ú–´ (—É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –±–ª–æ–∫ –¢–û–ß–ù–û —Ç–∞–∫–æ–π) ---
    if (themeSelectionScreen) {
        console.log("DEBUG: Attaching listeners to theme cards. themeSelectionScreen is:", themeSelectionScreen);
        const themeCards = themeSelectionScreen.querySelectorAll('.theme-card'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º querySelectorAll –Ω–∞ —Å–∞–º–æ–º —ç–∫—Ä–∞–Ω–µ
        console.log(`DEBUG: Found ${themeCards.length} theme cards inside #theme-selection-screen.`);

        if (themeCards && themeCards.length > 0) {
            themeCards.forEach((card, index) => {
                console.log(`DEBUG: Adding click listener to theme card ${index + 1} (data-theme: ${card.dataset.theme})`);
                card.addEventListener('click', (event) => { // –î–æ–±–∞–≤–∏–ª event
                    console.log(`DEBUG: Theme card CLICKED! Theme: ${card.dataset.theme}. Click target:`, event.target);
                    const selectedTheme = card.dataset.theme;
                    gameState.theme = selectedTheme; 
                    gameState.audienceMood = 75;
                    switch(selectedTheme) { 
                        case 'news': gameState.themeModifiers = { text: 1.2, meme: 0.8, video: 1.1 }; gameState.channelName = "–ù–æ–≤–æ—Å—Ç–Ω–æ–π –í–µ—Å—Ç–Ω–∏–∫"; gameState.balance = 110; break;
                        case 'entertainment': gameState.themeModifiers = { text: 0.9, meme: 1.5, video: 1.2 }; gameState.channelName = "–í–µ—Å–µ–ª—ã–π –£–≥–æ–ª–æ–∫"; break;
                        case 'education': gameState.themeModifiers = { text: 1.3, meme: 0.7, video: 1.0 }; gameState.channelName = "–ê–∫–∞–¥–µ–º–∏—è –ó–Ω–∞–Ω–∏–π"; gameState.subscribers = 5; break;
                        case 'tech': gameState.themeModifiers = { text: 1.1, meme: 1.0, video: 1.3 }; gameState.channelName = "–¢–µ—Ö–Ω–æ –ì—É—Ä—É"; break;
                    }
                    logEvent(`–í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞: ${getThemeDisplayName(selectedTheme)}`, "success");
                    console.log("DEBUG: Theme selected, saving game and showing welcome screen...");
                    saveGame(); 
                    showWelcomeScreen();
                });
            });
            console.log("DEBUG: Event listeners successfully ADDED to all theme cards.");
        } else { 
            console.error("DEBUG: CRITICAL - No theme cards (.theme-card) found INSIDE #theme-selection-screen!"); 
        }
    } else {
        console.error("DEBUG: CRITICAL - #theme-selection-screen element NOT FOUND for attaching listeners!");
    }
    
    // --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–ü–£–°–ö–ê ---
    console.log("DEBUG: Attempting to show preloader...");
    if (preloader) {
        showTopLevelScreen(preloader);
    } else { 
        console.error("DEBUG: Preloader is null, cannot show. Attempting to start game flow directly.");
        initializeGameFlow();
    }
    
    setTimeout(() => {
        console.log("DEBUG: Preloader timeout! Hiding preloader, calling initializeGameFlow.");
        if (preloader) { 
            preloader.classList.remove('visible'); 
            preloader.style.pointerEvents = 'none'; // –Ø–≤–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–∫–∏
            setTimeout(() => { 
                if(preloader) preloader.style.display = 'none'; 
                console.log("DEBUG: Preloader display set to none.");
            }, 500); // –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= transition-duration –¥–ª—è opacity
        }
        initializeGameFlow();
    }, 2500); 

    if (startGameButton) { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ, –≤—ã–∑—ã–≤–∞–µ—Ç playCutscene() ... */ }
    if (tg.BackButton) { /* ... –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –ø–æ–ª–Ω–æ–º –∫–æ–¥–µ ... */ }

    console.log("DEBUG: Script execution finished setup.");
});
