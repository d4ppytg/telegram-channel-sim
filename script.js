document.addEventListener('DOMContentLoaded', () => {
    const tg = window.Telegram.WebApp;

    // –≠–∫—Ä–∞–Ω—ã –∏ –æ–≤–µ—Ä–ª–µ–∏
    const preloader = document.getElementById('preloader');
    const themeSelectionScreen = document.getElementById('theme-selection-screen');
    const welcomeScreen = document.getElementById('welcome-screen');
    const cutsceneScreen = document.getElementById('cutscene-screen');
    const studioContainer = document.querySelector('.studio-container'); // –ù–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω
    
    const startGameButton = document.getElementById('start-game-button');
    const cutsceneSlides = cutsceneScreen ? cutsceneScreen.querySelectorAll('.cutscene-slide') : [];
    let currentSlideIndex = 0;
    const telegramUsernameDisplay = document.getElementById('telegram-username-display');
    const userPhotoEl = document.getElementById('user-photo');

    const characterEl = document.getElementById('character-sprite');
    let characterStateTimeout; 

    // –≠–ª–µ–º–µ–Ω—Ç—ã "–°—Ç—É–¥–∏–∏"
    const channelNameHeaderEl = document.getElementById('channel-name-header'); // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π ID
    const subscribersCountEl = document.getElementById('subscribers-count');
    const balanceCountEl = document.getElementById('balance-count');
    const audienceMoodDisplay = document.getElementById('audience-mood-display');
    const gameVersionEl = document.getElementById('game-version');

    // –¢—Ä–µ–Ω–¥—ã (–æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–Ω–Ω–µ—Ä)
    const currentTrendDisplay = document.getElementById('current-trend-display');
    const trendDescriptionEl = document.getElementById('trend-description');
    const trendBonusEl = document.getElementById('trend-bonus');
    const trendDurationEl = document.getElementById('trend-duration');

    // –¢—Ä–µ–Ω–¥—ã –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–µ (–µ—Å–ª–∏ –æ–Ω–∏ –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
    const channelNameOnMonitorEl = document.getElementById('channel-name-on-monitor');
    const currentTrendDisplayMonitor = document.getElementById('current-trend-display-monitor');
    const trendDescriptionMonitorEl = document.getElementById('trend-description-monitor');

    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const createPostButtonMonitor = document.getElementById('create-post-button-monitor'); // –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª–∫—É
    const openUpgradesButton = document.getElementById('open-upgrades-button');
    const openLogButton = document.getElementById('open-log-button');

    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –∏ –∏—Ö —ç–ª–µ–º–µ–Ω—Ç—ã
    const createPostModal = document.getElementById('create-post-modal');
    const upgradesModal = document.getElementById('upgrades-modal');
    const logModal = document.getElementById('log-modal');
    const closeModalButtons = document.querySelectorAll('.close-modal-button');

    const postTextButtonModal = document.getElementById('post-text-button-modal');
    const postMemeButtonModal = document.getElementById('post-meme-button-modal');
    const postVideoButtonModal = document.getElementById('post-video-button-modal');
    const upgradeContentQualityButtonModal = document.getElementById('upgrade-content-quality-modal');
    const eventLogUl = document.getElementById('event-log');

    const liveFeedbackContainer = document.getElementById('live-feedback-container');
    const MAX_FEEDBACK_ITEMS = 7;
    // ... (–º–∞—Å—Å–∏–≤—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ —ç–º–æ–¥–∑–∏ –∫–∞–∫ —Ä–∞–Ω—å—à–µ) ...
    const positiveComments = ["–ö—Ä—É—Ç–æ!", "–õ—É—á—à–∏–π –ø–æ—Å—Ç!", "–û–≥–æ–Ω—å üî•", "–õ—é–±–ª—é!", "–ü–æ–¥–ø–∏—Å–∫–∞!", "üëçüëçüëç", "–ì–µ–Ω–∏–∞–ª—å–Ω–æ!"];
    const neutralComments = ["–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ.", "–ù–µ–ø–ª–æ—Ö–æ.", "–ü–æ–π–¥–µ—Ç.", "–ù–æ—Ä–º.", "ü§î", "–û–∫."];
    const negativeComments = ["–ß—Ç–æ —ç—Ç–æ?", "–°–∫—É—á–Ω–æ.", "–û—Ç–ø–∏—Å–∫–∞.", "üëé", "–ù–µ –ø–æ–Ω—è–ª.", "–£–∂–∞—Å."];
    const reactionEmojis = ['‚ù§Ô∏è', 'üòÇ', 'üéâ', 'ü§Ø', 'üëÄ', 'üíØ'];

    tg.ready();
    tg.expand();

    let defaultGameState = {
        channelName: "–ú–æ–π –ö–∞–Ω–∞–ª", subscribers: 0, balance: 100, engagementRate: 0,
        audienceMood: 75, contentQualityMultiplier: 1, postsMade: 0,
        gameVersion: "0.8.0_stable", 
        theme: null, themeModifiers: { text: 1, meme: 1, video: 1 },
        currentTrend: null, trendPostsRemaining: 0,
    };
    let gameState = { ...defaultGameState };

    const CHARACTER_STATES = { IDLE_BLINKING: 'idle_blinking', TYPING: 'typing', HAPPY: 'happy', SLEEPING: 'sleeping' };
    function setCharacterState(newState, durationMs = 0) { /* ... –∫–∞–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ–ª–Ω–æ–º –∫–æ–¥–µ ... */ }

    // --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –≠–ö–†–ê–ù–ê–ú–ò ---
    function showScreen(screenElementToShow) {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–µ –æ–≤–µ—Ä–ª–µ–∏ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—Ç—É–¥–∏–∏
        [preloader, themeSelectionScreen, welcomeScreen, cutsceneScreen, studioContainer, createPostModal, upgradesModal, logModal].forEach(el => {
            if (el) { 
                el.classList.remove('visible'); 
                el.style.display = 'none';
            }
        });

        if (screenElementToShow) {
            screenElementToShow.style.display = 'flex'; 
            // –î–ª—è studioContainer —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å—Ç–∏–ª–∏ display —É–∂–µ –µ—Å—Ç—å –≤ CSS, –∫–æ–≥–¥–∞ –æ–Ω .visible
            if (screenElementToShow === studioContainer) {
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç—É–¥–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã
                if(studioSidePanel) studioSidePanel.style.display = 'flex';
            } else {
                if(studioSidePanel) studioSidePanel.style.display = 'none';
            }
            
            requestAnimationFrame(() => { 
                requestAnimationFrame(() => { 
                    screenElementToShow.classList.add('visible'); 
                }); 
            });
        }
    }
    
    function playCutscene() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ, –≤ –∫–æ–Ω—Ü–µ –≤—ã–∑—ã–≤–∞–µ—Ç startGameplay() ... */ }
    function showNextSlide() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
    
    function initializeGameFlow() { 
        const savedState = localStorage.getItem('channelSimGameState_v0.8.0_stable'); 
        if (savedState) { const parsedState = JSON.parse(savedState); gameState = { ...defaultGameState, ...parsedState }; if (gameState.theme) { showWelcomeScreen(); return; } }
        gameState = { ...defaultGameState }; saveGame(); showThemeSelectionScreen();
    }
    function showThemeSelectionScreen() { /* ... */ showScreen(themeSelectionScreen); }
    function showWelcomeScreen() { /* ... */ showScreen(welcomeScreen); }
    
    function startGameplay() { 
        loadGame(); 
        showScreen(studioContainer); 
        setCharacterState(CHARACTER_STATES.IDLE_BLINKING);
        logEvent(`–°—Ç—É–¥–∏—è –æ—Ç–∫—Ä—ã—Ç–∞! –ö–∞–Ω–∞–ª: ${gameState.channelName}.`, "info");
    }

    function loadGame() { 
        const savedState = localStorage.getItem('channelSimGameState_v0.8.0_stable');
        if (savedState) { const parsedState = JSON.parse(savedState); gameState = { ...defaultGameState, ...parsedState };}
        if (gameVersionEl) gameVersionEl.textContent = `v${gameState.gameVersion}`;
        if (channelNameHeaderEl) channelNameHeaderEl.textContent = gameState.channelName || `–ö–∞–Ω–∞–ª [${getThemeDisplayName(gameState.theme)}]`;
        updateUI(); updateTrendUI(); checkUpgradeButtonStatus();
    }
    function saveGame() { localStorage.setItem('channelSimGameState_v0.8.0_stable', JSON.stringify(gameState)); }
    function logEvent(message, type = 'info') { /* ... –∫–∞–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ–ª–Ω–æ–º –∫–æ–¥–µ ... */ }
    
    function updateUI() { 
        if (channelNameHeaderEl) channelNameHeaderEl.textContent = gameState.channelName; // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Ö–µ–¥–µ—Ä–µ —Å—Ç—É–¥–∏–∏
        if (channelNameOnMonitorEl) channelNameOnMonitorEl.textContent = gameState.channelName; // –ò –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–µ
        if (subscribersCountEl) subscribersCountEl.textContent = gameState.subscribers;
        if (balanceCountEl) balanceCountEl.textContent = gameState.balance.toFixed(0);
        if (audienceMoodDisplay) audienceMoodDisplay.textContent = gameState.audienceMood.toFixed(0);
        // ER –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ UI
        // updateTrendUI(); // –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    }
    function checkUpgradeButtonStatus() { 
        if (!upgradeContentQualityButtonModal) return; // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –º–æ–¥–∞–ª–∫–µ
        const cost = parseInt(upgradeContentQualityButtonModal.dataset.cost);
        upgradeContentQualityButtonModal.disabled = gameState.balance < cost;
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        const costTextEl = upgradeContentQualityButtonModal.textContent.match(/\(\$([0-9]+)\)/);
        if (costTextEl) {
            upgradeContentQualityButtonModal.textContent = upgradeContentQualityButtonModal.textContent.replace(costTextEl[0], `(–°—Ç–æ–∏–º–æ—Å—Ç—å: $${cost})`);
        }
    }
    function updateTrendUI() { 
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–Ω–Ω–µ—Ä —Ç—Ä–µ–Ω–¥–∞
        if (gameState.currentTrend && gameState.trendPostsRemaining > 0) {
            if (trendDescriptionEl) trendDescriptionEl.textContent = `${gameState.currentTrend.topic} (${getPostTypeName(gameState.currentTrend.type)})`;
            if (trendBonusEl) trendBonusEl.textContent = gameState.currentTrend.bonus;
            if (trendDurationEl) trendDurationEl.textContent = gameState.trendPostsRemaining;
            if (currentTrendDisplay) currentTrendDisplay.style.display = 'block';
            // –ò –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–µ (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è)
            if (trendDescriptionMonitorEl) trendDescriptionMonitorEl.textContent = `${gameState.currentTrend.topic} (${getPostTypeName(gameState.currentTrend.type)}) Bonus x${gameState.currentTrend.bonus}, ${gameState.trendPostsRemaining} –ø.`;
            if (currentTrendDisplayMonitor) currentTrendDisplayMonitor.style.display = 'block';
        } else {
            if (currentTrendDisplay) currentTrendDisplay.style.display = 'none';
            if (currentTrendDisplayMonitor) currentTrendDisplayMonitor.style.display = 'none';
            // gameState.currentTrend = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ
        }
    }
    function generateNewTrend() { /* ... –∫–∞–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ–ª–Ω–æ–º –∫–æ–¥–µ ... */ }
    function getThemeDisplayName(themeKey) { /* ... */ }
    function getPostTypeName(typeKey) { /* ... */ }

    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    function openModal(modalElement) { if (modalElement) { showScreen(modalElement); } }
    function closeModal(modalElement) { if (modalElement) { modalElement.classList.remove('visible'); setTimeout(() => { modalElement.style.display = 'none'; }, 300); showScreen(studioContainer); } }

    if(createPostButtonMonitor) createPostButtonMonitor.addEventListener('click', () => openModal(createPostModal));
    if(openUpgradesButton) openUpgradesButton.addEventListener('click', () => openModal(upgradesModal));
    if(openLogButton) openLogButton.addEventListener('click', () => openModal(logModal));
    closeModalButtons.forEach(button => { button.addEventListener('click', () => { const modalId = button.dataset.modalId; const modalToClose = document.getElementById(modalId); closeModal(modalToClose); }); });

    // –í—Å–ø–ª—ã–≤–∞—é—â–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    function showFeedback(text, isEmoji = false, username = null) { /* ... –∫–∞–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ–ª–Ω–æ–º –∫–æ–¥–µ ... */ }

    // –î–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä—ã (—Ç–µ–ø–µ—Ä—å –∫–Ω–æ–ø–∫–∏ –≤ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–Ω–∞—Ö)
    function handlePostAction(postType, baseSubMin, baseSubMax, baseMoneyMin, baseMoneyMax, erMin, erMax) {
        setCharacterState(CHARACTER_STATES.TYPING); 
        setTimeout(() => {
            // ... (–í–°–Ø –ª–æ–≥–∏–∫–∞ –ø–æ—Å—Ç–∞ –∫–∞–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ–ª–Ω–æ–º –∫–æ–¥–µ) ...
            // ...
            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–¥–±–µ–∫–∞
            const feedbackCount = Math.floor(Math.random() * 3) + 2; 
            for (let i = 0; i < feedbackCount; i++) { /* ... */ }
            
            closeModal(createPostModal); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
        }, 700); 
    }

     if(postTextButtonModal) postTextButtonModal.addEventListener('click', () => handlePostAction('text', 1, 5, 2, 10, 1, 5));
     if(postMemeButtonModal) postMemeButtonModal.addEventListener('click', () => handlePostAction('meme', 3, 10, 1, 5, 2, 8));
     if(postVideoButtonModal) postVideoButtonModal.addEventListener('click', () => handlePostAction('video', 8, 20, 7, 18, 3, 10));
     
     if(upgradeContentQualityButtonModal) upgradeContentQualityButtonModal.addEventListener('click', () => { 
        const cost = parseInt(upgradeContentQualityButtonModal.dataset.cost);
        if (gameState.balance >= cost) {
            // ... (–ª–æ–≥–∏–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –∫–∞–∫ —Ä–∞–Ω—å—à–µ) ...
            upgradeContentQualityButtonModal.textContent = `–£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–°—Ç–æ–∏–º–æ—Å—Ç—å: $${newCost})`; // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            setCharacterState(CHARACTER_STATES.HAPPY, 1500); 
            closeModal(upgradesModal);
        } else { /* ... */ }
     });

    if (themeSelectionScreen) { /* ... –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
    
    showScreen(preloader); // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—Ä–µ–ª–æ–∞–¥–µ—Ä–∞
    setTimeout(() => {
        if (preloader) { preloader.classList.remove('visible'); setTimeout(() => { if(preloader) preloader.style.display = 'none'; }, 700); }
        initializeGameFlow();
    }, 2500); 

    if (startGameButton) { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ, –≤—ã–∑—ã–≤–∞–µ—Ç playCutscene() ... */ }
    
    if (tg.BackButton) { /* ... –∫–∞–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ–ª–Ω–æ–º –∫–æ–¥–µ, –Ω–æ –±–µ–∑ setActiveGameScreen ... */
        tg.BackButton.show();
        tg.BackButton.onClick(() => {
            const visibleModal = document.querySelector('.modal-overlay.visible');
            if (visibleModal) { closeModal(visibleModal); }
            else if (studioContainer && studioContainer.classList.contains('visible')) { saveGame(); logEvent("–í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã (–ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω).", "info"); tg.close(); }
            // ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ else if –¥–ª—è cutscene, welcome, theme) ...
            else { tg.close(); }
        });
    }
});
