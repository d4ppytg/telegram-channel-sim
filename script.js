document.addEventListener('DOMContentLoaded', () => {
    // --- –ó–∞–≥–ª—É—à–∫–∞ Telegram WebApp API –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ ---
    let tg;
    if (typeof window.Telegram === 'undefined' || typeof window.Telegram.WebApp === 'undefined') {
        console.warn('Telegram WebApp API –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ —Å –∑–∞–≥–ª—É—à–∫–æ–π.');
        tg = {
            ready: () => console.log('Telegram.WebApp.ready() (–∑–∞–≥–ª—É—à–∫–∞)'),
            expand: () => console.log('Telegram.WebApp.expand() (–∑–∞–≥–ª—É—à–∫–∞)'),
            initDataUnsafe: {
                user: {
                    username: 'debug_user',
                    first_name: '–û—Ç–ª–∞–¥–∫–∞',
                    photo_url: 'placeholder-avatar.png'
                }
            },
            HapticFeedback: {
                notificationOccurred: (type) => console.log(`HapticFeedback: ${type} (–∑–∞–≥–ª—É—à–∫–∞)`),
                impactOccurred: (type) => console.log(`HapticFeedback: ${type} (–∑–∞–≥–ª—É—à–∫–∞)`)
            },
            BackButton: {
                show: () => console.log('BackButton show (–∑–∞–≥–ª—É—à–∫–∞)'),
                hide: () => console.log('BackButton hide (–∑–∞–≥–ª—É—à–∫–∞)'),
                onClick: (callback) => {
                    console.log('BackButton onClick (–∑–∞–≥–ª—É—à–∫–∞)');
                    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Telegram —Å–∞–º –≤—ã–∑—ã–≤–∞–µ—Ç callback –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
                },
                offClick: (callback) => console.log('BackButton offClick (–∑–∞–≥–ª—É—à–∫–∞)') // –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            },
            close: () => console.log('Telegram.WebApp.close() (–∑–∞–≥–ª—É—à–∫–∞)')
        };
        window.Telegram = { WebApp: tg };
    } else {
        tg = window.Telegram.WebApp;
        console.log('Telegram WebApp API detected.');
    }

    tg.ready();
    tg.expand(); // –†–∞—Å—à–∏—Ä—è–µ–º WebApp –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω

    // --- DOM Elements ---
    const preloaderScreen = document.getElementById('preloader-screen');
    const preloaderProgressBarFill = document.querySelector('.preloader-progress-bar-fill');
    const themeSelectionScreen = document.getElementById('theme-selection-screen');
    const mainDashboardScreen = document.getElementById('main-dashboard-screen');
    const createContentScreen = document.getElementById('create-content-screen');
    const analyticsScreen = document.getElementById('analytics-screen');
    const teamScreen = document.getElementById('team-screen');
    const monetizationScreen = document.getElementById('monetization-screen');

    // –ö–Ω–æ–ø–∫–∏
    const themeCards = document.querySelectorAll('.theme-card');
    const selectThemeButton = document.getElementById('select-theme-button');
    const createPostBtn = document.getElementById('create-post-btn');
    const analyticsBtn = document.getElementById('analytics-btn');
    const teamBtn = document.getElementById('team-btn');
    const monetizationBtn = document.getElementById('monetization-btn');
    const generateIdeaBtn = document.getElementById('generate-idea-btn');
    const contentTypeBtns = document.querySelectorAll('.content-type-btn');


    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ –¥–∞—à–±–æ—Ä–¥–µ
    const energyValueEl = document.getElementById('energy-value');
    const energyMaxEl = document.getElementById('energy-max');
    const moodValueEl = document.getElementById('mood-value');
    const moodMaxEl = document.getElementById('mood-max');
    const channelNameEl = document.getElementById('channel-name');
    const subscribersValueEl = document.getElementById('subscribers-value');
    const subscribersChangeEl = document.getElementById('subscribers-change');
    const viewsValueEl = document.getElementById('views-value');
    const viewsChangeEl = document.getElementById('views-change');
    const balanceValueEl = document.getElementById('balance-value');
    const warningMessageEl = document.getElementById('warning-message');
    const warningTextEl = document.getElementById('warning-text');

    // –ü–µ—Ä—Å–æ–Ω–∞–∂
    const characterSpriteEl = document.getElementById('character-sprite');

    // –°—Ç–∞—Ç—É—Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç–∞
    const postProductionStatusEl = document.getElementById('post-production-status');
    const postInProductionTypeEl = document.getElementById('post-in-production-type');
    const postProductionProgressFillEl = document.getElementById('post-production-progress-fill');
    const postProductionTimeLeftEl = document.getElementById('post-production-time-left');

    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    const modalOverlayEl = document.getElementById('modal-overlay');
    const modalContentEl = document.getElementById('modal-content');
    const closeModalButtonEl = document.querySelector('.close-modal-button');
    const modalTitleEl = document.getElementById('modal-title');
    const modalBodyEl = document.getElementById('modal-body');
    const modalActionsEl = document.getElementById('modal-actions');

    const contentIdeasListEl = document.getElementById('content-ideas-list');


    // --- Game State (Core) ---
    const initialGameState = {
        currentScreen: 'preloader-screen',
        userName: '–ò–≥—Ä–æ–∫',
        channelTheme: null,
        channel: {
            name: '–ú–æ–π –ö–∞–Ω–∞–ª',
            subscribers: 0,
            subscribersChange: 0,
            views: 0,
            viewsChange: 0,
            balance: 0,
            level: 1, // –£—Ä–æ–≤–µ–Ω—å –∫–∞–Ω–∞–ª–∞
            reputation: 100 // –í–ª–∏—è–µ—Ç –Ω–∞ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏—Ö–æ–¥ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π
        },
        energy: 100,
        maxEnergy: 100,
        mood: 100,
        maxMood: 100,
        contentQuality: 1, // –£—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        team: [], // –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        activeTrends: [], // –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã
        postProduction: {
            inProgress: false,
            type: '', // –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
            duration: 0, // –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            timeLeft: 0, // –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
            progress: 0 // –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        },
        log: [], // –ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π
        lastTickTime: Date.now(),
        lastIdeaRefreshTime: Date.now(),
        availableContentIdeas: [], // –ò–¥–µ–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
        gameVersion: 'v0.1.0' // –í–µ—Ä—Å–∏—è –∏–≥—Ä—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
    };

    let gameState = JSON.parse(JSON.stringify(initialGameState)); // –ì–ª—É–±–æ–∫–∞—è –∫–æ–ø–∏—è

    // --- Game Data (Configuration) ---
    // –≠—Ç–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä—ã, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ä–∏—Ç—å
    const gameConfig = {
        TICK_INTERVAL_MS: 1000, // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã –≤ –º—Å
        SAVE_INTERVAL_MS: 5000, // –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –º—Å
        ENERGY_REGEN_RATE_PER_SEC: 1,
        MOOD_DECAY_RATE_PER_SEC: 0.1,
        IDEA_REFRESH_INTERVAL_SEC: 60, // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–¥–µ–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –¥–ª—è —Ç–µ—Å—Ç–∞
        // ... –¥—Ä—É–≥–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏ (—Ä–æ—Å—Ç–∞, —Ç—Ä–µ–Ω–¥–æ–≤, –∞–ø–≥—Ä–µ–π–¥–æ–≤)
    };

    const themesData = {
        gaming: { name: '–ò–≥—Ä–æ–≤–æ–π –ö–∞–Ω–∞–ª', icon: 'üéÆ', contentIdeas: [] },
        lifestyle: { name: '–õ–∞–π—Ñ—Å—Ç–∞–π–ª –ë–ª–æ–≥', icon: '‚ú®', contentIdeas: [] },
        tech: { name: '–¢–µ—Ö–Ω–æ–±–ª–æ–≥', icon: 'üíª', contentIdeas: [] }
    };

    // –ü—Ä–∏–º–µ—Ä –∏–¥–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –≤ data/content_ideas_data.js)
    const allContentIdeas = [
        { id: 'gaming_review', theme: 'gaming', name: '–û–±–∑–æ—Ä –Ω–æ–≤–æ–π –∏–≥—Ä—ã', description: '–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ–±–∑–æ—Ä —Å–≤–µ–∂–µ–≥–æ —Ä–µ–ª–∏–∑–∞.', energyCost: 20, duration: 15, baseSubs: 100, baseViews: 500, baseBalance: 50, icon: 'üéÆ', formats: ['–í–∏–¥–µ–æ', '–¢–µ–∫—Å—Ç'], minQuality: 1 },
        { id: 'gaming_memes', theme: 'gaming', name: '–°–≤–µ–∂–∏–µ –∏–≥—Ä–æ–≤—ã–µ –º–µ–º—ã', description: '–°–±–æ—Ä–Ω–∏–∫ –ª—É—á—à–∏—Ö –º–µ–º–æ–≤ –Ω–µ–¥–µ–ª–∏.', energyCost: 10, duration: 8, baseSubs: 50, baseViews: 300, baseBalance: 20, icon: 'üòÇ', formats: ['–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', '–¢–µ–∫—Å—Ç'], minQuality: 1 },
        { id: 'tech_review_gadget', theme: 'tech', name: '–û–±–∑–æ—Ä –Ω–æ–≤–æ–≥–æ –≥–∞–¥–∂–µ—Ç–∞', description: '–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞/–Ω–æ—É—Ç–±—É–∫–∞.', energyCost: 25, duration: 20, baseSubs: 150, baseViews: 800, baseBalance: 70, icon: 'üì±', formats: ['–í–∏–¥–µ–æ', '–¢–µ–∫—Å—Ç'], minQuality: 1 },
        { id: 'tech_lifehacks', theme: 'tech', name: '5 –ª–∞–π—Ñ—Ö–∞–∫–æ–≤ –¥–ª—è –ü–ö', description: '–£—Å–∫–æ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.', energyCost: 15, duration: 12, baseSubs: 80, baseViews: 400, baseBalance: 30, icon: 'üí°', formats: ['–¢–µ–∫—Å—Ç', '–í–∏–¥–µ–æ'], minQuality: 1 },
        { id: 'lifestyle_vlog_day', theme: 'lifestyle', name: '–ú–æ–π –¥–µ–Ω—å –≤–ª–æ–≥', description: '–ü–æ–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –¥–µ–Ω—å –≤ –≥–æ—Ä–æ–¥–µ.', energyCost: 20, duration: 18, baseSubs: 120, baseViews: 600, baseBalance: 60, icon: 'üö∂‚Äç‚ôÄÔ∏è', formats: ['–í–∏–¥–µ–æ'], minQuality: 1 },
        { id: 'lifestyle_food_recipe', theme: 'lifestyle', name: '–ü—Ä–æ—Å—Ç–æ–π —Ä–µ—Ü–µ–ø—Ç —É–∂–∏–Ω–∞', description: '–í–∫—É—Å–Ω–æ–µ –∏ –±—ã—Å—Ç—Ä–æ–µ –±–ª—é–¥–æ.', energyCost: 15, duration: 10, baseSubs: 70, baseViews: 350, baseBalance: 25, icon: 'üç≥', formats: ['–¢–µ–∫—Å—Ç', '–í–∏–¥–µ–æ'], minQuality: 1 },
        // ... –¥—Ä—É–≥–∏–µ –∏–¥–µ–∏
    ];


    // --- Core Game Functions ---

    // Load game state from LocalStorage
    function loadGame() {
        try {
            const savedState = localStorage.getItem('socialMediaTycoonState');
            if (savedState) {
                const parsedState = JSON.parse(savedState);
                if (parsedState.gameVersion === gameState.gameVersion) {
                    gameState = { ...initialGameState, ...parsedState };
                    console.log('Game loaded successfully.');
                    addLog('–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.', 'info');
                } else {
                    console.warn('Game version mismatch. Starting new game.');
                    addLog('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –∏–≥—Ä—ã. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É.', 'warning');
                    // –ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                }
            } else {
                console.log('No saved game found. Starting new game.');
                addLog('–ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞.', 'info');
            }
        } catch (e) {
            console.error('Error loading game state:', e);
            addLog('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É.', 'error');
            localStorage.removeItem('socialMediaTycoonState'); // Clear corrupted save
        }
        gameState.lastTickTime = Date.now(); // Reset last tick time on load
    }

    // Save game state to LocalStorage
    function saveGame() {
        try {
            localStorage.setItem('socialMediaTycoonState', JSON.stringify(gameState));
            console.log('Game state saved.');
        } catch (e) {
            console.error('Error saving game state:', e);
            addLog('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä—ã.', 'error');
        }
    }

    // Add log entry
    function addLog(message, type = 'info') {
        const timestamp = new Date().toLocaleTimeString();
        gameState.log.unshift({ timestamp, message, type }); // Add to beginning
        if (gameState.log.length > 50) { // Limit log size
            gameState.log.pop();
        }
        // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –º–æ–¥–∞–ª–∫—É –∂—É—Ä–Ω–∞–ª–∞, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞
    }

    // Update UI elements
    function updateUI() {
        energyValueEl.textContent = Math.floor(gameState.energy); // –û–∫—Ä—É–≥–ª—è–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        moodValueEl.textContent = Math.floor(gameState.mood);
        channelNameEl.textContent = gameState.channel.name;
        subscribersValueEl.textContent = formatNumber(gameState.channel.subscribers);
        balanceValueEl.textContent = formatNumber(gameState.channel.balance);
        viewsValueEl.textContent = formatNumber(gameState.channel.views);

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤/–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        updateTrendArrow(subscribersChangeEl, gameState.channel.subscribersChange, 'subscribers');
        updateTrendArrow(viewsChangeEl, gameState.channel.viewsChange, 'views');

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        updateCharacterSprite();

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç–∞
        if (gameState.postProduction.inProgress) {
            postProductionStatusEl.classList.remove('hidden');
            postInProductionTypeEl.textContent = gameState.postProduction.type;
            const progress = gameState.postProduction.progress;
            postProductionProgressFillEl.style.width = `${progress}%`;
            postProductionTimeLeftEl.textContent = Math.ceil(gameState.postProduction.timeLeft);
        } else {
            postProductionStatusEl.classList.add('hidden');
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–Ω–æ–ø–æ–∫ (–ø—Ä–∏–º–µ—Ä)
        createPostBtn.disabled = gameState.postProduction.inProgress || gameState.energy < 10; // –ü—Ä–∏–º–µ—Ä
    }

    function updateTrendArrow(element, change, type) {
        if (change > 0) {
            element.innerHTML = `<i class="fas fa-arrow-up trend-arrow up"></i><span class="trend-change">+${formatNumber(change)}</span>`;
        } else if (change < 0) {
            element.innerHTML = `<i class="fas fa-arrow-down trend-arrow down"></i><span class="trend-change">${formatNumber(change)}</span>`;
        } else {
            element.innerHTML = `<span class="trend-change">0</span>`;
        }
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–π—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    function updateCharacterSprite() {
        let imageUrl = '';
        switch (gameState.characterState) {
            case 'idle':
                imageUrl = 'assets/character_idle.png';
                break;
            case 'typing':
                imageUrl = 'assets/character_typing.png';
                break;
            case 'happy':
                imageUrl = 'assets/character_happy.png';
                break;
            case 'sleeping':
                imageUrl = 'assets/character_sleeping.png';
                break;
            default:
                imageUrl = 'assets/character_idle.png'; // Fallback
        }
        characterSpriteEl.src = imageUrl;

        // Manage animation classes (assuming these are defined in CSS)
        // Remove all state-related classes first
        characterSpriteEl.classList.forEach(cls => {
            if (cls.startsWith('char-state-') || cls.startsWith('char-anim-')) {
                characterSpriteEl.classList.remove(cls);
            }
        });
        // Add new state class
        characterSpriteEl.classList.add(`char-state-${gameState.characterState}`);

        // Add specific animation classes if needed for idle state
        if (gameState.characterState === 'idle') {
            characterSpriteEl.classList.add('char-anim-idle-blink');
        }
    }


    // --- Screen Management ---
    function showScreen(screenElementId) {
        document.querySelectorAll('.screen').forEach(screen => {
            screen.classList.remove('visible');
            screen.style.zIndex = '1';
        });

        const targetScreen = document.getElementById(screenElementId);
        if (targetScreen) {
            targetScreen.classList.add('visible');
            targetScreen.style.zIndex = '2';
            gameState.currentScreen = screenElementId;
            // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" Telegram WebApp
            if (screenElementId !== 'main-dashboard-screen' && screenElementId !== 'preloader-screen' && screenElementId !== 'theme-selection-screen') {
                tg.BackButton.show();
                tg.BackButton.onClick(goBackToDashboard);
            } else {
                tg.BackButton.hide();
                tg.BackButton.offClick(goBackToDashboard); // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —É—Ç–µ—á–µ–∫
            }
        }
        saveGame();
    }

    function goBackToDashboard() {
        showScreen('main-dashboard-screen');
        tg.HapticFeedback.impactOccurred('light');
    }

    // --- Modal Management ---
    function openModal(title, bodyHtml, actionsHtml = '', allowClose = true) {
        modalTitleEl.textContent = title;
        modalBodyEl.innerHTML = bodyHtml;
        modalActionsEl.innerHTML = actionsHtml;

        if (allowClose) {
            closeModalButtonEl.style.display = 'block';
            closeModalButtonEl.onclick = closeModal;
        } else {
            closeModalButtonEl.style.display = 'none'; // –°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
        }

        modalOverlayEl.classList.remove('hidden');
        modalOverlayEl.classList.add('visible');
        tg.HapticFeedback.impactOccurred('light');

        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" Telegram WebApp –¥–ª—è –º–æ–¥–∞–ª–æ–∫
        tg.BackButton.show(); // –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ Telegram WebApp
        tg.BackButton.onClick(closeModal); // –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ "–ù–∞–∑–∞–¥" –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É
    }

    function closeModal() {
        modalOverlayEl.classList.remove('visible');
        modalOverlayEl.classList.add('hidden');
        tg.HapticFeedback.impactOccurred('light');

        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
        if (gameState.currentScreen !== 'main-dashboard-screen' && gameState.currentScreen !== 'preloader-screen' && gameState.currentScreen !== 'theme-selection-screen') {
            tg.BackButton.onClick(goBackToDashboard);
        } else {
            tg.BackButton.hide();
        }
    }

    // --- Game Loop (Tick) ---
    let gameLoopInterval;
    let saveGameInterval;

    function gameTick() {
        const now = Date.now();
        const deltaTime = (now - gameState.lastTickTime) / 1000; // Delta time in seconds
        gameState.lastTickTime = now;

        // --- Core Mechanics (Placeholder) ---
        // 1. Energy Regeneration
        if (gameState.energy < gameState.maxEnergy) {
            gameState.energy = Math.min(gameState.maxEnergy, gameState.energy + gameConfig.ENERGY_REGEN_RATE_PER_SEC * deltaTime);
        }

        // 2. Mood Decay
        if (gameState.mood > 0 && !gameState.postProduction.inProgress) {
            gameState.mood = Math.max(0, gameState.mood - gameConfig.MOOD_DECAY_RATE_PER_SEC * deltaTime);
        }

        // 3. Post Production Progress
        if (gameState.postProduction.inProgress) {
            gameState.postProduction.timeLeft -= deltaTime;
            gameState.postProduction.progress = (1 - gameState.postProduction.timeLeft / gameState.postProduction.duration) * 100;

            if (gameState.postProduction.timeLeft <= 0) {
                completePostProduction();
            }
        }

        // 4. Trend Management (placeholder)
        // checkAndActivateTrends(); // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/—Å–º–µ–Ω—ã —Ç—Ä–µ–Ω–¥–æ–≤

        // 5. Passive Growth (placeholder)
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–æ—Å—Ç–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        // gameState.channel.subscribers += Math.floor(Math.random() * 5 * deltaTime);
        // gameState.channel.views += Math.floor(Math.random() * 20 * deltaTime);
        // gameState.channel.balance += Math.floor(Math.random() * 0.1 * deltaTime);


        // 6. Idea Refresh (placeholder)
        if ((now - gameState.lastIdeaRefreshTime) / 1000 >= gameConfig.IDEA_REFRESH_INTERVAL_SEC) {
            generateContentIdeas();
        }


        updateUI(); // Update UI at the end of each tick
    }

    function startMainGameLoop() {
        if (gameLoopInterval) clearInterval(gameLoopInterval);
        if (saveGameInterval) clearInterval(saveGameInterval);

        gameLoopInterval = setInterval(gameTick, gameConfig.TICK_INTERVAL_MS);
        saveGameInterval = setInterval(saveGame, gameConfig.SAVE_INTERVAL_MS);
        addLog('–ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª –∑–∞–ø—É—â–µ–Ω.', 'info');
    }


    // --- Content Creation Logic (Placeholder) ---
    function generateContentIdeas() {
        if (!gameState.channelTheme) {
            console.error('–¢–µ–º–∞ –∫–∞–Ω–∞–ª–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∏.');
            contentIdeasListEl.innerHTML = '<p class="placeholder-text">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã –ø–æ—è–≤–∏–ª–∏—Å—å –∏–¥–µ–∏.</p>';
            return;
        }

        // –§–∏–ª—å—Ç—Ä—É–µ–º –∏–¥–µ–∏ –ø–æ —Ç–µ–º–µ –∏ —É—Ä–æ–≤–Ω—é –∫–∞—á–µ—Å—Ç–≤–∞
        const relevantIdeas = allContentIdeas.filter(
            idea => idea.theme === gameState.channelTheme && idea.minQuality <= gameState.contentQuality
        );

        gameState.availableContentIdeas = [];
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ 3 —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–¥–µ–π –∏–∑ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö
        const numIdeasToShow = Math.min(relevantIdeas.length, 3);
        for(let i = 0; i < numIdeasToShow; i++) {
            const randomIndex = Math.floor(Math.random() * relevantIdeas.length);
            const idea = relevantIdeas.splice(randomIndex, 1)[0]; // –£–¥–∞–ª—è–µ–º, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–∏—Å—å
            gameState.availableContentIdeas.push(idea);
        }

        if (gameState.availableContentIdeas.length === 0 && allContentIdeas.length > 0) {
            // –ï—Å–ª–∏ –∏–¥–µ–π –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –Ω–æ –±–∞–∑–∞ –Ω–µ –ø—É—Å—Ç–∞, –≤–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ –∏–¥–µ–∏ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω—ã –∏–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–µ–º–µ/–∫–∞—á–µ—Å—Ç–≤—É
            contentIdeasListEl.innerHTML = '<p class="placeholder-text">–ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∏–¥–µ–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–µ–π —Ç–µ–º–µ –∏ —É—Ä–æ–≤–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –ò–ò!</p>';
        } else if (allContentIdeas.length === 0) {
             contentIdeasListEl.innerHTML = '<p class="placeholder-text">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–¥–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.</p>';
        }


        gameState.lastIdeaRefreshTime = Date.now();
        displayContentIdeas();
    }

    function displayContentIdeas() {
        contentIdeasListEl.innerHTML = '';
        if (gameState.availableContentIdeas.length === 0) {
            contentIdeasListEl.innerHTML = '<p class="placeholder-text">–ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∏–¥–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –ò–ò!</p>';
            return;
        }

        gameState.availableContentIdeas.forEach(idea => {
            const button = document.createElement('button');
            button.className = 'btn content-idea-button';
            button.dataset.ideaId = idea.id;
            button.innerHTML = `
                <span class="idea-icon">${idea.icon || 'üìù'}</span>
                <div class="idea-details">
                    <h3>${idea.name}</h3>
                    <p>${idea.description}</p>
                    <span class="idea-cost">‚ö° ${idea.energyCost} —ç–Ω–µ—Ä–≥–∏–∏</span>
                    <span class="idea-duration">‚è±Ô∏è ${idea.duration} —Å–µ–∫</span>
                </div>
            `;
            button.onclick = () => startPostProduction(idea);
            button.disabled = gameState.energy < idea.energyCost || gameState.postProduction.inProgress;
            contentIdeasListEl.appendChild(button);
        });
    }

    function startPostProduction(idea) {
        if (gameState.energy < idea.energyCost) {
            openModal('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≠–Ω–µ—Ä–≥–∏–∏', '<p>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞.</p>', '<button class="btn" onclick="closeModal()">–û–ö</button>');
            tg.HapticFeedback.notificationOccurred('error');
            return;
        }
        if (gameState.postProduction.inProgress) {
            openModal('–í–Ω–∏–º–∞–Ω–∏–µ', '<p>–í—ã —É–∂–µ —Å–æ–∑–¥–∞–µ—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Å—Ç. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è!</p>', '<button class="btn" onclick="closeModal()">–û–ö</button>');
            tg.HapticFeedback.notificationOccurred('warning');
            return;
        }

        gameState.energy -= idea.energyCost;
        gameState.postProduction.inProgress = true;
        gameState.postProduction.type = idea.name;
        gameState.postProduction.duration = idea.duration; // –í —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –∞–ø–≥—Ä–µ–π–¥–æ–≤/–∫–æ–º–∞–Ω–¥—ã
        gameState.postProduction.timeLeft = idea.duration;
        gameState.postProduction.progress = 0;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–ø–µ—á–∞—Ç–∞–µ—Ç"
        gameState.characterState = 'typing'; 
        updateCharacterSprite(); 

        addLog(`–ù–∞—á–∞—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: "${idea.name}".`, 'info');
        tg.HapticFeedback.notificationOccurred('success');
        updateUI();
        showScreen('main-dashboard-screen'); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –¥–∞—à–±–æ—Ä–¥
    }

    function completePostProduction() {
        const postIdea = allContentIdeas.find(idea => idea.name === gameState.postProduction.type);
        if (!postIdea) {
            console.error('Completed post idea not found:', gameState.postProduction.type);
            addLog('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞: –∏–¥–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', 'error');
            resetPostProduction();
            return;
        }

        // –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–Ω—É–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–π –º–µ—Ö–∞–Ω–∏–∫–æ–π)
        let subsGained = postIdea.baseSubs * gameState.contentQuality;
        let viewsGained = postIdea.baseViews * gameState.contentQuality;
        let balanceGained = postIdea.baseBalance * gameState.contentQuality;

        // –í–ª–∏—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, —Ç—Ä–µ–Ω–¥–æ–≤, —Ä–µ–ø—É—Ç–∞—Ü–∏–∏, –∫–æ–º–∞–Ω–¥—ã –∏ —Ç.–¥.
        subsGained *= (gameState.mood / 100);
        viewsGained *= (gameState.mood / 100);
        balanceGained *= (gameState.mood / 100);

        gameState.channel.subscribers += Math.round(subsGained);
        gameState.channel.views += Math.round(viewsGained);
        gameState.channel.balance += Math.round(balanceGained);
        gameState.channel.subscribersChange = Math.round(subsGained); // –ü—Ä–∏–º–µ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ "–ø–µ—Ä–∏–æ–¥"
        gameState.channel.viewsChange = Math.round(viewsGained);


        gameState.mood = Math.min(gameState.maxMood, gameState.mood + 10); // –ü–æ–≤—ã—à–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏

        addLog(`–ü–æ—Å—Ç "${postIdea.name}" –∑–∞–≤–µ—Ä—à–µ–Ω! +${formatNumber(Math.round(subsGained))} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, +$${formatNumber(Math.round(balanceGained))}`, 'success');
        tg.HapticFeedback.notificationOccurred('success');

        resetPostProduction();
        generateContentIdeas(); // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∏–¥–µ–∏
        updateUI();

        openModal(
            '–ö–æ–Ω—Ç–µ–Ω—Ç –ì–æ—Ç–æ–≤!',
            `<p>–í—ã –≤—ã–ø—É—Å—Ç–∏–ª–∏ "${postIdea.name}"!</p>
            <p>+${formatNumber(Math.round(subsGained))} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</p>
            <p>+${formatNumber(Math.round(viewsGained))} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤</p>
            <p>+${formatNumber(Math.round(balanceGained))} ‚ÇΩ –¥–æ—Ö–æ–¥–∞</p>`,
            `<button class="btn" onclick="closeModal()">–û—Ç–ª–∏—á–Ω–æ!</button>`
        );
    }

    function resetPostProduction() {
        gameState.postProduction.inProgress = false;
        gameState.postProduction.type = '';
        gameState.postProduction.duration = 0;
        gameState.postProduction.timeLeft = 0;
        gameState.postProduction.progress = 0;
        characterSpriteEl.classList.remove('char-state-typing'); // –°–±—Ä–æ—Å –∞–Ω–∏–º–∞—Ü–∏–∏
        gameState.characterState = 'idle'; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ idle
        updateCharacterSprite(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø—Ä–∞–π—Ç
    }

    // --- Handlers for main action buttons ---
    function handleCreatePostClick() {
        showScreen('create-content-screen');
        generateContentIdeas(); // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–¥–µ–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
        tg.HapticFeedback.impactOccurred('light');
    }

    function handleAnalyticsClick() {
        showScreen('analytics-screen');
        tg.HapticFeedback.impactOccurred('light');
    }

    function handleTeamClick() {
        showScreen('team-screen');
        tg.HapticFeedback.impactOccurred('light');
    }

    function handleMonetizationClick() {
        showScreen('monetization-screen');
        tg.HapticFeedback.impactOccurred('light');
    }

    function handleGenerateIdeaClick() {
        // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π
        openModal(
            '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ò–¥–µ–π –ò–ò',
            '<p>–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–¥—ã... (–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)</p>',
            '<button class="btn" onclick="closeModal()">–û–ö</button>'
        );
        tg.HapticFeedback.impactOccurred('medium');
    }

    function handleContentTypeClick(event) {
        contentTypeBtns.forEach(btn => btn.classList.remove('active'));
        event.currentTarget.classList.add('active');
        // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∏ –ø–æ —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        tg.HapticFeedback.impactOccurred('light');
    }


    // --- Theme Selection Logic ---
    let selectedThemeCard = null;
    themeCards.forEach(card => {
        card.addEventListener('click', () => {
            if (selectedThemeCard) {
                selectedThemeCard.classList.remove('selected');
            }
            card.classList.add('selected');
            selectedThemeCard = card;
            gameState.channelTheme = card.dataset.theme;
            selectThemeButton.disabled = false;
            tg.HapticFeedback.impactOccurred('light');
        });
    });

    selectThemeButton.addEventListener('click', () => {
        if (gameState.channelTheme) {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º—ã
            gameState.channel.name = themesData[gameState.channelTheme].name.toUpperCase();
            addLog(`–í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞ –∫–∞–Ω–∞–ª–∞: "${themesData[gameState.channelTheme].name}".`, 'info');
            // –í —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ –±—É–¥–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω/–∫–∞—Ç—Å—Ü–µ–Ω–∞
            showScreen('main-dashboard-screen');
            startMainGameLoop();
            generateContentIdeas(); // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–¥–µ–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
            tg.HapticFeedback.notificationOccurred('success');
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
            if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
                gameState.userName = tg.initDataUnsafe.user.first_name || tg.initDataUnsafe.user.username || '–ò–≥—Ä–æ–∫';
                // userPhotoEl.src = tg.initDataUnsafe.user.photo_url || 'placeholder-avatar.png'; // –µ—Å–ª–∏ –µ—Å—Ç—å –∞–≤–∞—Ç–∞—Ä
            }
        }
    });


    // --- Event Listeners ---
    createPostBtn.addEventListener('click', handleCreatePostClick);
    analyticsBtn.addEventListener('click', handleAnalyticsClick);
    teamBtn.addEventListener('click', handleTeamClick);
    monetizationBtn.addEventListener('click', handleMonetizationClick);
    generateIdeaBtn.addEventListener('click', handleGenerateIdeaClick);

    contentTypeBtns.forEach(btn => {
        btn.addEventListener('click', handleContentTypeClick);
    });

    closeModalButtonEl.addEventListener('click', closeModal);
    modalOverlayEl.addEventListener('click', (e) => {
        if (e.target === modalOverlayEl && modalOverlayEl.classList.contains('visible')) { // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –µ—Å–ª–∏ –∫–ª–∏–∫ –ø–æ –æ–≤–µ—Ä–ª–µ—é
            closeModal();
        }
    });

    // --- Utility Functions ---
    function formatNumber(num) {
        if (num >= 1000000000) {
            return (num / 1000000000).toFixed(1) + 'B';
        }
        if (num >= 1000000) {
            return (num / 1000000).toFixed(1) + 'M';
        }
        if (num >= 1000) {
            return (num / 1000).toFixed(1) + 'K';
        }
        return num.toFixed(0);
    }

    // --- Initialization ---
    function initializeApp() {
        loadGame(); // Try to load saved game
        updateUI(); // Initial UI update

        // Preloader animation
        let preloaderProgress = 0;
        const preloaderDuration = 1500; // Total duration for preloader animation
        const intervalTime = 50; // Update every 50ms
        const increment = (100 / (preloaderDuration / intervalTime));

        const preloaderInterval = setInterval(() => {
            preloaderProgress += increment;
            if (preloaderProgress >= 100) {
                preloaderProgress = 100;
                clearInterval(preloaderInterval);
                preloaderProgressBarFill.style.width = '100%';

                setTimeout(() => {
                    preloaderScreen.classList.add('hidden');
                    // Decide which screen to show after preloader
                    if (!gameState.channelTheme) { // If theme not selected, go to theme selection
                        showScreen('theme-selection-screen');
                    } else { // Otherwise, go to dashboard
                        showScreen('main-dashboard-screen');
                        startMainGameLoop();
                        generateContentIdeas(); // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–¥–µ–∏, –µ—Å–ª–∏ —É–∂–µ –Ω–∞ –¥–∞—à–±–æ—Ä–¥–µ
                    }
                }, 300); // Small delay to allow fade out
            }
            preloaderProgressBarFill.style.width = `${preloaderProgress}%`;
        }, intervalTime);
    }

    initializeApp();

    // --- App Lifecycle Events (for Telegram Web App) ---
    tg.onEvent('mainButtonClicked', () => {
        saveGame();
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è WebApp, –µ—Å–ª–∏ Main Button –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —ç—Ç–æ–≥–æ
        // tg.close();
    });

    // Handle page visibility for pausing/resuming game
    document.addEventListener('visibilitychange', () => {
        if (document.hidden) {
            clearInterval(gameLoopInterval);
            clearInterval(saveGameInterval);
            saveGame(); // Save before pausing
            addLog('–ò–≥—Ä–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.', 'info');
        } else {
            loadGame(); // Load last state
            if (gameState.currentScreen === 'main-dashboard-screen') {
                startMainGameLoop();
            }
            addLog('–ò–≥—Ä–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞.', 'info');
        }
    });

    window.addEventListener('beforeunload', () => {
        saveGame();
    });

});
