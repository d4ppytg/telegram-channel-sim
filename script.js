document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM Content Loaded. Script execution started.');

    // === –ó–∞–≥–ª—É—à–∫–∞ Telegram WebApp API –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ ===
    let tg;
    if (typeof window.Telegram === 'undefined' || typeof window.Telegram.WebApp === 'undefined') {
        console.warn('Telegram WebApp API –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ —Å –∑–∞–≥–ª—É—à–∫–æ–π.');
        tg = {
            ready: () => console.log('Telegram.WebApp.ready() (–∑–∞–≥–ª—É—à–∫–∞)'),
            expand: () => console.log('Telegram.WebApp.expand() (–∑–∞–≥–ª—É—à–∫–∞)'),
            initDataUnsafe: {
                user: {
                    username: 'debug_user',
                    first_name: '–û—Ç–ª–∞–¥–∫–∞',
                    photo_url: 'placeholder-avatar.png'
                }
            },
            HapticFeedback: {
                notificationOccurred: (type) => console.log(`HapticFeedback: ${type} (–∑–∞–≥–ª—É—à–∫–∞)`),
                impactOccurred: (type) => console.log(`HapticFeedback: ${type} (–∑–∞–≥–ª—É—à–∫–∞)`)
            },
            BackButton: {
                show: () => console.log('BackButton show (–∑–∞–≥–ª—É—à–∫–∞)'),
                hide: () => console.log('BackButton hide (–∑–∞–≥–ª—É—à–∫–∞)'),
                onClick: (callback) => {
                    console.log('BackButton onClick (–∑–∞–≥–ª—É—à–∫–∞)');
                    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Telegram —Å–∞–º –≤—ã–∑—ã–≤–∞–µ—Ç callback –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
                }
            },
            close: () => console.log('Telegram.WebApp.close() (–∑–∞–≥–ª—É—à–∫–∞)')
        };
        window.Telegram = { WebApp: tg };
    } else {
        tg = window.Telegram.WebApp;
        console.log('Telegram WebApp API detected.');
    }

    // === –≠–ª–µ–º–µ–Ω—Ç—ã DOM ===
    // –≠–∫—Ä–∞–Ω—ã
    const preloader = document.getElementById('preloader');
    const themeSelectionScreen = document.getElementById('theme-selection-screen');
    const welcomeScreen = document.getElementById('welcome-screen');
    const cutsceneScreen = document.getElementById('cutscene-screen');
    const studioContainer = document.querySelector('.studio-container');

    // –ö–Ω–æ–ø–∫–∏
    const startGameButton = document.getElementById('start-game-button');
    const selectThemeButton = document.getElementById('select-theme-button');
    const continueToStudioButton = document.getElementById('continue-to-studio-button');
    const createPostButton = document.getElementById('create-post-button');
    const upgradesButton = document.getElementById('upgrades-button');
    const logButton = document.getElementById('log-button');

    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –∏ –∏—Ö –∫–Ω–æ–ø–∫–∏
    const createPostModal = document.getElementById('create-post-modal');
    const upgradesModal = document.getElementById('upgrades-modal');
    const logModal = document.getElementById('log-modal');
    const closeModalButtons = document.querySelectorAll('.close-modal-button');

    // –ù–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–¥–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const contentIdeasList = document.getElementById('content-ideas-list');

    const upgradeContentQualityButton = document.getElementById('upgrade-content-quality');

    // –≠–ª–µ–º–µ–Ω—Ç—ã UI
    const cutsceneSlides = cutsceneScreen ? cutsceneScreen.querySelectorAll('.cutscene-slide') : [];
    let currentSlideIndex = 0;
    const telegramUsernameDisplay = document.getElementById('telegram-username-display');
    const userPhotoEl = document.getElementById('user-photo');
    const characterEl = document.getElementById('character-sprite');
    let characterStateTimeout;

    const channelNameOnMonitorEl = document.getElementById('channel-name-on-monitor');
    const subscribersCountEl = document.getElementById('subscribers-count');
    const balanceCountEl = document.getElementById('balance-count');
    const audienceMoodDisplay = document.getElementById('audience-mood-display');
    const gameVersionEl = document.getElementById('game-version');
    const energyCountEl = document.getElementById('energy-count');

    const currentTrendDisplayMonitor = document.getElementById('current-trend-display-monitor');
    const trendDescriptionMonitorEl = document.getElementById('trend-description-monitor');

    const postProductionStatus = document.getElementById('post-production-status');
    const postTypeInProduction = document.getElementById('post-type-in-production');
    const postProductionProgressFill = document.getElementById('post-production-progress-fill');
    const postProductionTimeRemaining = document.getElementById('post-production-time-remaining');

    const eventLogList = document.getElementById('event-log');

    // === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã ===
    const initialGameState = {
        subscribers: 0,
        balance: 0,
        audienceMood: 100,
        energy: 100,
        selectedTheme: null, // –ë—É–¥–µ—Ç 'gaming', 'lifestyle', 'tech'
        gameStarted: false,
        lastActiveTime: Date.now(),
        postInProduction: null,
        contentQualityLevel: 1,
        log: [],
        gameVersion: '0.8.0' // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–≥—Ä—ã
    };

    let gameState = { ...initialGameState };

    // === –ù–ê–°–¢–†–û–ô–ö–ò –ò–ì–†–´ (–û–ë–ù–û–í–õ–ï–ù–û) ===
    const gameSettings = {
        preloaderDuration: 3000,
        cutsceneSlideDuration: 2500,
        energyRestoreRate: 1000 * 60 * 5, // 5 –º–∏–Ω—É—Ç –Ω–∞ 1 –µ–¥–∏–Ω–∏—Ü—É —ç–Ω–µ—Ä–≥–∏–∏
        energyRestoreAmount: 1,
        maxEnergy: 100,
        // –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ (–≤–ª–∏—è—é—Ç –Ω–∞ –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–¥–µ–π)
        formatModifiers: {
            text: { subscriberMultiplier: 0.8, earningsMultiplier: 0.7, durationMultiplier: 0.5, moodImpact: -5, icon: '‚úçÔ∏è' },
            meme: { subscriberMultiplier: 1.0, earningsMultiplier: 0.9, durationMultiplier: 0.7, moodImpact: -8, icon: 'üòÇ' },
            video: { subscriberMultiplier: 1.2, earningsMultiplier: 1.1, durationMultiplier: 1.0, moodImpact: -12, icon: 'üé•' }
        },
        audienceMoodImpact: {
            successfulPostBase: 10, // –ë–∞–∑–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ—Å—Ç–µ
            failedPost: -15 // –ï—Å–ª–∏ —Ä–µ—à–∏–º –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ö–∞–Ω–∏–∫—É –ø—Ä–æ–≤–∞–ª–∞
        },
        upgradeCosts: {
            contentQuality: 50
        },
        upgradeBenefits: {
            contentQuality: {
                subscriberMultiplier: 1.15, // +15% –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞
                earningsMultiplier: 1.1,   // +10% –¥–æ—Ö–æ–¥–∞ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞
                moodBonus: 5               // +5 –∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞
            }
        },
        trends: [
            { name: "–í–∏—Ä—É—Å–Ω—ã–µ –ß–µ–ª–ª–µ–Ω–¥–∂–∏", bonus: { subscribers: 1.5, earnings: 1.2 }, types: ['meme', 'video'] },
            { name: "–ì–ª—É–±–æ–∫–∏–µ –û–±–∑–æ—Ä—ã", bonus: { subscribers: 1.3, earnings: 1.4 }, types: ['video', 'text'] },
            { name: "–ë—ã—Å—Ç—Ä—ã–µ –ù–æ–≤–æ—Å—Ç–∏", bonus: { subscribers: 1.2, earnings: 1.1 }, types: ['text', 'meme'] },
            { name: "–õ–µ—Ç—Å–ø–ª–µ–∏ –∏ –°—Ç—Ä–∏–º—ã", bonus: { subscribers: 1.6, earnings: 1.3 }, types: ['video'] }, // –ò–≥—Ä–æ–≤–æ–π
            { name: "DIY –∏ –õ–∞–π—Ñ—Ö–∞–∫–∏", bonus: { subscribers: 1.2, earnings: 1.1 }, types: ['video', 'text'] }, // –õ–∞–π—Ñ—Å—Ç–∞–π–ª/–¢–µ—Ö–Ω–æ
            { name: "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ –í–ª–æ–≥–∏", bonus: { subscribers: 1.7, earnings: 1.5 }, types: ['video'] }, // –õ–∞–π—Ñ—Å—Ç–∞–π–ª
            { name: "–†–∞—Å–ø–∞–∫–æ–≤–∫–∏", bonus: { subscribers: 1.4, earnings: 1.3 }, types: ['video'] } // –¢–µ—Ö–Ω–æ
        ],
        // === –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ò–î–ï–ò –ö–û–ù–¢–ï–ù–¢–ê –ü–û –¢–ï–ú–ê–ú ===
        contentIdeas: {
            gaming: [
                {
                    id: 'game_review', name: '–û–±–∑–æ—Ä –Ω–æ–≤–æ–π –∏–≥—Ä—ã', description: '–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–≤–µ–∂–µ–≥–æ —Ä–µ–ª–∏–∑–∞.',
                    baseSubscribers: 15, baseEarnings: 30, energyCost: 20, baseDuration: 20,
                    formats: ['video', 'text'] // –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –∏–¥–µ–∏
                },
                {
                    id: 'boss_guide', name: '–ì–∞–π–¥ –ø–æ –±–æ—Å—Å—É', description: '–ü–æ–º–æ–≥–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ —Å–ª–æ–∂–Ω–æ–≥–æ –±–æ—Å—Å–∞!',
                    baseSubscribers: 10, baseEarnings: 20, energyCost: 15, baseDuration: 12,
                    formats: ['video', 'text']
                },
                {
                    id: 'meme_compilation', name: '–ò–≥—Ä–æ–≤–∞—è –ø–æ–¥–±–æ—Ä–∫–∞ –º–µ–º–æ–≤', description: '–°–º–µ—à–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ —à—É—Ç–∫–∏ –∏–∑ –∏–≥—Ä.',
                    baseSubscribers: 8, baseEarnings: 15, energyCost: 10, baseDuration: 8,
                    formats: ['meme']
                },
                {
                    id: 'live_stream', name: '–ü—Ä—è–º–æ–π —ç—Ñ–∏—Ä —Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ–º', description: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç—Ä–∏–º —Å –≤–∞—à–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π.',
                    baseSubscribers: 20, baseEarnings: 40, energyCost: 25, baseDuration: 30, // –ë–æ–ª–µ–µ –¥–æ–ª–≥–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
                    formats: ['video']
                }
            ],
            lifestyle: [
                {
                    id: 'daily_vlog', name: '–ú–æ–π –¥–µ–Ω—å –∏–∑ –∂–∏–∑–Ω–∏', description: '–ü–æ–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤–∞—à –æ–±—ã—á–Ω—ã–π –¥–µ–Ω—å.',
                    baseSubscribers: 12, baseEarnings: 25, energyCost: 18, baseDuration: 18,
                    formats: ['video', 'text']
                },
                {
                    id: 'fashion_tips', name: '–°–æ–≤–µ—Ç—ã –ø–æ —Å—Ç–∏–ª—é', description: '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –º–æ–¥–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.',
                    baseSubscribers: 9, baseEarnings: 18, energyCost: 12, baseDuration: 10,
                    formats: ['text', 'meme']
                },
                {
                    id: 'travel_story', name: '–†–∞—Å—Å–∫–∞–∑ –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏', description: '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –∏ —Å–æ–≤–µ—Ç–∞–º–∏ –∏–∑ –ø–æ–µ–∑–¥–∫–∏.',
                    baseSubscribers: 18, baseEarnings: 35, energyCost: 25, baseDuration: 25,
                    formats: ['video']
                },
                {
                    id: 'cooking_recipe', name: '–ö—É–ª–∏–Ω–∞—Ä–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç', description: '–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ —á—Ç–æ-—Ç–æ –≤–∫—É—Å–Ω–æ–µ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.',
                    baseSubscribers: 10, baseEarnings: 20, energyCost: 15, baseDuration: 15,
                    formats: ['video', 'text']
                }
            ],
            tech: [
                {
                    id: 'gadget_review', name: '–û–±–∑–æ—Ä –Ω–æ–≤–æ–≥–æ –≥–∞–¥–∂–µ—Ç–∞', description: '–í—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏.',
                    baseSubscribers: 20, baseEarnings: 40, energyCost: 25, baseDuration: 25,
                    formats: ['video', 'text']
                },
                {
                    id: 'software_guide', name: '–ì–∞–π–¥ –ø–æ –ü–û', description: '–ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ —Ö–∏—Ç—Ä–æ—Å—Ç–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø—Ä–æ–≥—Ä–∞–º–º.',
                    baseSubscribers: 10, baseEarnings: 22, energyCost: 15, baseDuration: 15,
                    formats: ['text', 'video']
                },
                {
                    id: 'tech_news_digest', name: '–î–∞–π–¥–∂–µ—Å—Ç —Ç–µ—Ö. –Ω–æ–≤–æ—Å—Ç–µ–π', description: '–ö–æ—Ä–æ—Ç–∫–æ –æ –≥–ª–∞–≤–Ω–æ–º –≤ –º–∏—Ä–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.',
                    baseSubscribers: 7, baseEarnings: 12, energyCost: 8, baseDuration: 7,
                    formats: ['text', 'meme']
                },
                {
                    id: 'pc_build_guide', name: '–°–±–æ—Ä–∫–∞ –ü–ö', description: '–ü–æ—à–∞–≥–æ–≤—ã–π –≥–∞–π–¥ –ø–æ —Å–±–æ—Ä–∫–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.',
                    baseSubscribers: 25, baseEarnings: 50, energyCost: 30, baseDuration: 35,
                    formats: ['video']
                }
            ]
        }
    };
    let currentTrend = null;
    let trendInterval;


    // === –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è UI ===

    function showScreen(screenElement) {
        console.log(`Attempting to show screen: ${screenElement ? screenElement.id : 'null'}`);
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
        [preloader, themeSelectionScreen, welcomeScreen, cutsceneScreen, studioContainer].forEach(screen => {
            if (screen) {
                screen.classList.remove('visible');
                screen.style.display = 'none';
            }
        });
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π
        if (screenElement) {
            screenElement.style.display = 'flex';
            setTimeout(() => screenElement.classList.add('visible'), 10);
            console.log(`Screen '${screenElement.id}' set to visible.`);
        } else {
            console.error('showScreen received a null element to display.');
        }
    }

    function updateProgressBar(element, progress) {
        if (element) {
            element.style.width = `${progress}%`;
        }
    }

    function updateUI() {
        if (subscribersCountEl) subscribersCountEl.textContent = formatNumber(gameState.subscribers);
        if (balanceCountEl) balanceCountEl.textContent = formatNumber(gameState.balance);
        if (audienceMoodDisplay) audienceMoodDisplay.textContent = getMoodText(gameState.audienceMood);
        if (energyCountEl) energyCountEl.textContent = gameState.energy;

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è
        const upgradeCost = gameSettings.upgradeCosts.contentQuality;
        if (upgradeContentQualityButton) {
            upgradeContentQualityButton.textContent = `–£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–£—Ä–æ–≤–µ–Ω—å ${gameState.contentQualityLevel + 1}): $${upgradeCost}`;
            upgradeContentQualityButton.disabled = gameState.balance < upgradeCost;
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
        if (currentTrend && studioContainer.classList.contains('visible')) {
            if (currentTrendDisplayMonitor) currentTrendDisplayMonitor.style.display = 'block';
            if (trendDescriptionMonitorEl) trendDescriptionMonitorEl.textContent = currentTrend.name;
        } else {
            if (currentTrendDisplayMonitor) currentTrendDisplayMonitor.style.display = 'none';
        }

        updateCharacterState();
    }

    function getMoodText(mood) {
        if (mood >= 90) return '–û—Ç–ª–∏—á–Ω–æ–µ';
        if (mood >= 70) return '–•–æ—Ä–æ—à–µ–µ';
        if (mood >= 40) return '–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ';
        if (mood >= 20) return '–ù–∏–∑–∫–æ–µ';
        return '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ';
    }

    function updateCharacterState(state = 'idle', duration = 0) {
        if (!characterEl) {
            console.warn('Character element not found for state update.');
            return;
        }
        if (characterStateTimeout) {
            clearTimeout(characterStateTimeout);
        }

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –∞–Ω–∏–º–∞—Ü–∏–π –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ
        characterEl.classList.remove(
            'char-state-idle', 'char-state-happy', 'char-state-typing', 'char-state-sleeping',
            'char-anim-idle-blink', 'bounce', 'typing-animation', 'fade-in-out' // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å—ã –∞–Ω–∏–º–∞—Ü–∏–π —Ç–æ–∂–µ
        );

        switch (state) {
            case 'idle':
                characterEl.classList.add('char-state-idle', 'char-anim-idle-blink');
                break;
            case 'happy':
                characterEl.classList.add('char-state-happy', 'bounce');
                if (duration === 0) { // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ idle —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                    characterStateTimeout = setTimeout(() => updateCharacterState('idle'), 2000);
                }
                break;
            case 'typing':
                characterEl.classList.add('char-state-typing', 'typing-animation');
                if (duration > 0) {
                    characterStateTimeout = setTimeout(() => updateCharacterState('idle'), duration * 1000);
                }
                break;
            case 'sleeping':
                characterEl.classList.add('char-state-sleeping', 'fade-in-out');
                break;
            default:
                characterEl.classList.add('char-state-idle', 'char-anim-idle-blink');
                break;
        }
    }


    function addLogEntry(message, type = 'info') {
        if (!eventLogList) {
            console.warn('Event log list element not found, cannot add log entry:', message);
            return;
        }
        const li = document.createElement('li');
        li.textContent = `${new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}: ${message}`;
        li.classList.add(`log-${type}`);
        eventLogList.prepend(li); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–µ
        gameState.log.unshift({ message, type, timestamp: Date.now() }); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞
        if (gameState.log.length > 50) {
            gameState.log.pop(); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–µ–π—à—É—é –∑–∞–ø–∏—Å—å –∏–∑ –º–∞—Å—Å–∏–≤–∞
        }
        // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–µ–π—à–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ DOM, –µ—Å–ª–∏ –∏—Ö —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
        while (eventLogList.children.length > 50) {
            eventLogList.removeChild(eventLogList.lastChild);
        }
        saveGameState();
    }


    // === –ò–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ ===

    function generateRandomTrend() {
        const randomIndex = Math.floor(Math.random() * gameSettings.trends.length);
        currentTrend = gameSettings.trends[randomIndex];
        addLogEntry(`–ù–æ–≤—ã–π —Ç—Ä–µ–Ω–¥: "${currentTrend.name}"!`, 'info');
        updateUI();
        if (tg.HapticFeedback && typeof tg.HapticFeedback.notificationOccurred === 'function') {
            tg.HapticFeedback.notificationOccurred('success');
        }
    }

    function startTrendCycle() {
        console.log('Starting trend cycle.');
        if (trendInterval) {
            clearInterval(trendInterval);
        }
        // –ú–µ–Ω—è–µ–º —Ç—Ä–µ–Ω–¥ –∫–∞–∂–¥—ã–µ 1-3 –º–∏–Ω—É—Ç—ã
        const trendChangeTime = (Math.random() * 2 + 1) * 60 * 1000;
        trendInterval = setInterval(generateRandomTrend, trendChangeTime);
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —Ç—Ä–µ–Ω–¥ —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Ü–∏–∫–ª–∞
        generateRandomTrend();
    }


    function restoreEnergy() {
        if (gameState.energy < gameSettings.maxEnergy) {
            gameState.energy = Math.min(gameSettings.maxEnergy, gameState.energy + gameSettings.energyRestoreAmount);
            updateUI();
        }
    }

    function startEnergyRestoreCycle() {
        console.log('Starting energy restore cycle.');
        setInterval(restoreEnergy, gameSettings.energyRestoreRate);
    }

    function calculateOfflineProgress() {
        console.log('Calculating offline progress...');
        const now = Date.now();
        const timeOffline = now - (gameState.lastActiveTime || now);
        if (timeOffline > 0) {
            const energyRestored = Math.floor(timeOffline / gameSettings.energyRestoreRate) * gameSettings.energyRestoreAmount;
            if (energyRestored > 0) {
                gameState.energy = Math.min(gameSettings.maxEnergy, gameState.energy + energyRestored);
                addLogEntry(`–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${energyRestored} —ç–Ω–µ—Ä–≥–∏–∏ –ø–æ–∫–∞ –≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∏.`, 'info');
            }
        }
        gameState.lastActiveTime = now;
        saveGameState();
    }


    // === –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ü–û–°–¢–ê ===
    function populateContentIdeas() {
        if (!contentIdeasList) {
            console.error('contentIdeasList element not found.');
            return;
        }
        contentIdeasList.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
        const ideasForTheme = gameSettings.contentIdeas[gameState.selectedTheme];

        if (!ideasForTheme || ideasForTheme.length === 0) {
            contentIdeasList.innerHTML = '<p class="placeholder-text">–î–ª—è –≤–∞—à–µ–π —Ç–µ–º—ã –ø–æ–∫–∞ –Ω–µ—Ç –∏–¥–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –≠—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ!</p>';
            console.warn(`No content ideas found for theme: ${gameState.selectedTheme}`);
            return;
        }

        ideasForTheme.forEach(idea => {
            const button = document.createElement('button');
            button.className = 'content-idea-button';
            
            // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ–≥–æ –∏–∫–æ–Ω–∫–∏ –∏ –±–∞–∑–æ–≤—ã—Ö –∑–∞—Ç—Ä–∞—Ç/–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
            // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞.
            const defaultFormatType = idea.formats[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
            const formatMod = gameSettings.formatModifiers[defaultFormatType];

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–∞
            const displayEnergyCost = idea.energyCost; // –≠–Ω–µ—Ä–≥–∏—è –±–µ—Ä–µ—Ç—Å—è –æ—Ç –∏–¥–µ–∏
            const displayDuration = Math.round(idea.baseDuration * formatMod.durationMultiplier);

            button.innerHTML = `
                <div class="idea-icon">${formatMod.icon}</div>
                <div class="idea-details">
                    <h3>${idea.name}</h3>
                    <p>${idea.description}</p>
                    <span class="idea-cost">–≠–Ω–µ—Ä–≥–∏—è: ${displayEnergyCost}‚ö°</span>
                    <span class="idea-duration">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ~${displayDuration}—Å–µ–∫</span>
                </div>
            `;
            button.dataset.ideaId = idea.id;
            button.dataset.formatType = defaultFormatType; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
            button.disabled = gameState.energy < displayEnergyCost;
            if (button.disabled) {
                 button.title = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏!';
            }

            button.addEventListener('click', () => {
                if (tg.HapticFeedback) tg.HapticFeedback.impactOccurred('light');
                startContentProduction(idea.id, defaultFormatType); // –ü–µ—Ä–µ–¥–∞–µ–º –∏ –∏–¥–µ—é, –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            });
            contentIdeasList.appendChild(button);
        });
        // –î–æ–±–∞–≤–∏–º —Å—Ç–∏–ª–∏ –¥–ª—è —ç—Ç–∏—Ö –∫–Ω–æ–ø–æ–∫ –≤ style.css
    }

    // startContentProduction —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç ideaId –ò formatType
    function startContentProduction(ideaId, formatType) {
        console.log(`Attempting to start content production for idea: ${ideaId}, format: ${formatType}`);
        if (gameState.postInProduction) {
            addLogEntry('–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç, –ø–æ–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ!', 'warning');
            if (tg.HapticFeedback) tg.HapticFeedback.notificationOccurred('warning');
            return;
        }

        const idea = gameSettings.contentIdeas[gameState.selectedTheme].find(i => i.id === ideaId);
        if (!idea) {
            console.error(`Idea with ID "${ideaId}" not found for theme "${gameState.selectedTheme}".`);
            addLogEntry('–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–¥–µ—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞.', 'error');
            if (tg.HapticFeedback) tg.HapticFeedback.notificationOccurred('error');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –∏–¥–µ—è –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        if (!idea.formats.includes(formatType)) {
            console.error(`Idea "${ideaId}" does not support format "${formatType}".`);
            addLogEntry(`–û—à–∏–±–∫–∞: –ò–¥–µ—è "${idea.name}" –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç "${formatType}".`, 'error');
            if (tg.HapticFeedback) tg.HapticFeedback.notificationOccurred('error');
            return;
        }

        const formatMod = gameSettings.formatModifiers[formatType];
        if (!formatMod) {
            console.error(`Format modifiers for "${formatType}" not found.`);
            addLogEntry('–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞.', 'error');
            if (tg.HapticFeedback) tg.HapticFeedback.notificationOccurred('error');
            return;
        }

        const energyRequired = idea.energyCost;
        if (gameState.energy < energyRequired) {
            addLogEntry('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ç–æ–π –∏–¥–µ–∏!', 'error');
            if (tg.HapticFeedback) tg.HapticFeedback.notificationOccurred('error');
            return;
        }

        gameState.energy -= energyRequired;
        updateUI();
        if (tg.HapticFeedback) tg.HapticFeedback.impactOccurred('light');

        // –†–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º –∏–¥–µ–∏, —Ñ–æ—Ä–º–∞—Ç–∞ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        let productionDuration = Math.round(idea.baseDuration * formatMod.durationMultiplier);
        let finalSubscribers = Math.round(idea.baseSubscribers * formatMod.subscriberMultiplier);
        let finalEarnings = Math.round(idea.baseEarnings * formatMod.earningsMultiplier);
        let moodChange = formatMod.moodImpact; // –ë–∞–∑–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞


        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å > 1)
        if (gameState.contentQualityLevel > 1) {
            const qualityBenefit = gameSettings.upgradeBenefits.contentQuality;
            finalSubscribers = Math.round(finalSubscribers * qualityBenefit.subscriberMultiplier);
            finalEarnings = Math.round(finalEarnings * qualityBenefit.earningsMultiplier);
            moodChange += qualityBenefit.moodBonus;
        }

        gameState.postInProduction = {
            ideaId: idea.id,
            formatType: formatType,
            duration: productionDuration,
            timeLeft: productionDuration,
            timer: null,
            results: { // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Å—Ç–∞
                subscribers: finalSubscribers,
                earnings: finalEarnings,
                moodChange: moodChange // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ moodChange –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
            }
        };
        saveGameState();

        if (postTypeInProduction) postTypeInProduction.textContent = `${idea.name} (${formatType})`; // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–¥–µ–∏ –∏ —Ñ–æ—Ä–º–∞—Ç
        if (postProductionStatus) postProductionStatus.style.display = 'block';
        if (createPostButton) createPostButton.disabled = true;
        updateCharacterState('typing', productionDuration);

        const startTime = Date.now();
        gameState.postInProduction.timer = setInterval(() => {
            const elapsed = Math.floor((Date.now() - startTime) / 1000);
            gameState.postInProduction.timeLeft = Math.max(0, productionDuration - elapsed);

            if (gameState.postInProduction.timeLeft <= 0) {
                clearInterval(gameState.postInProduction.timer);
                completePost(gameState.postInProduction.ideaId, gameState.postInProduction.formatType, gameState.postInProduction.results);
            } else {
                if (postProductionTimeRemaining) postProductionTimeRemaining.textContent = gameState.postInProduction.timeLeft;
                const progress = ((productionDuration - gameState.postInProduction.timeLeft) / productionDuration) * 100;
                if (postProductionProgressFill) updateProgressBar(postProductionProgressFill, progress);
            }
        }, 1000);

        addLogEntry(`–ù–∞—á–∞—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ "${idea.name}" –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${formatType}.`, 'info');
        if (createPostModal) hideModal(createPostModal);
    }

    // `completePost` —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç ideaId, formatType, –∏ pre-calculated results
    function completePost(ideaId, formatType, results) {
        console.log(`Completing post for idea: ${ideaId}, format: ${formatType}`);
        const idea = gameSettings.contentIdeas[gameState.selectedTheme].find(i => i.id === ideaId);
        if (!idea) {
            console.error(`Idea with ID "${ideaId}" not found during completion.`);
            addLogEntry('–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ—Å—Ç (–∏–¥–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞).', 'error');
            return;
        }

        let gainedSubscribers = results.subscribers;
        let gainedEarnings = results.earnings;
        let moodChange = results.moodChange; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–µ–Ω–¥—ã
        if (currentTrend && currentTrend.types.includes(formatType)) { // –ò—Å–ø–æ–ª—å–∑—É–µ–º 'types'
            gainedSubscribers = Math.round(gainedSubscribers * currentTrend.bonus.subscribers);
            gainedEarnings = Math.round(gainedEarnings * currentTrend.bonus.earnings);
            addLogEntry(`–ü–æ—Å—Ç "${idea.name}" –≤ —Ç—Ä–µ–Ω–¥–µ "${currentTrend.name}"! –ü–æ–ª—É—á–µ–Ω—ã –±–æ–Ω—É—Å—ã.`, 'success');
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å –∑–∞ —É—Å–ø–µ—à–Ω—ã–π –ø–æ—Å—Ç
        moodChange += gameSettings.audienceMoodImpact.successfulPostBase;

        gameState.subscribers += gainedSubscribers;
        gameState.balance += gainedEarnings;
        gameState.audienceMood = Math.max(0, Math.min(100, gameState.audienceMood + moodChange));

        addLogEntry(`"${idea.name}" (${formatType}) –∑–∞–≤–µ—Ä—à–µ–Ω! +${gainedSubscribers} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, +$${gainedEarnings}. –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${getMoodText(gameState.audienceMood)} (${moodChange > 0 ? '+' : ''}${moodChange}).`, 'success');
        if (tg.HapticFeedback && typeof tg.HapticFeedback.notificationOccurred === 'function') {
            tg.HapticFeedback.notificationOccurred('success');
        }

        gameState.postInProduction = null;
        if (postProductionStatus) postProductionStatus.style.display = 'none';
        if (createPostButton) createPostButton.disabled = false;
        updateCharacterState('happy'); // –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å—á–∞—Å—Ç–ª–∏–≤ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ—Å—Ç–∞

        saveGameState();
        updateUI();
    }

    function upgradeContentQuality() {
        console.log('Attempting to upgrade content quality.');
        const cost = gameSettings.upgradeCosts.contentQuality;
        if (gameState.balance >= cost) {
            gameState.balance -= cost;
            gameState.contentQualityLevel++;
            gameSettings.upgradeCosts.contentQuality = Math.round(cost * 1.5); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è
            addLogEntry(`–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É–ª—É—á—à–µ–Ω–æ –¥–æ —É—Ä–æ–≤–Ω—è ${gameState.contentQualityLevel}!`, 'success');
            if (tg.HapticFeedback && typeof tg.HapticFeedback.notificationOccurred === 'function') {
                tg.HapticFeedback.notificationOccurred('success');
            }
            saveGameState();
            updateUI();
        } else {
            addLogEntry('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.', 'error');
            if (tg.HapticFeedback && typeof tg.HapticFeedback.notificationOccurred === 'function') {
                tg.HapticFeedback.notificationOccurred('error');
            }
        }
    }

    // === –£—Ç–∏–ª–∏—Ç—ã ===
    function formatNumber(num) {
        if (num >= 1000000) {
            return (num / 1000000).toFixed(1).replace(/\.0$/, '') + 'M';
        }
        if (num >= 1000) {
            return (num / 1000).toFixed(1).replace(/\.0$/, '') + 'K';
        }
        return num;
    }

    // === –§—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏ ===
    function saveGameState() {
        try {
            const stateToSave = JSON.stringify(gameState);
            localStorage.setItem('channelControlGameState', stateToSave);
            console.log('Game state saved successfully.');
        } catch (e) {
            console.error('Error saving game state to Local Storage:', e);
            addLogEntry('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä—ã. –í–æ–∑–º–æ–∂–Ω–æ, —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ.', 'error');
        }
    }

    function loadGameState() {
        console.log('Attempting to load game state...');
        try {
            const savedState = localStorage.getItem('channelControlGameState');
            if (savedState) {
                const parsedState = JSON.parse(savedState);

                // **–í–ù–ò–ú–ê–ù–ò–ï: –õ–û–ì–ò–ö–ê –ú–ò–ì–†–ê–¶–ò–ò –ò –°–û–•–†–ê–ù–ï–ù–ò–Ø –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –°–û–°–¢–û–Ø–ù–ò–Ø**
                // –°–Ω–∞—á–∞–ª–∞ –±–µ—Ä–µ–º initialGameState, –∑–∞—Ç–µ–º –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
                // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –Ω–æ–≤—ã–µ –ø–æ–ª—è –±—É–¥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ —Å—Ç–∞—Ä–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.
                gameState = { ...initialGameState, ...parsedState };

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
                if (parsedState.gameVersion !== initialGameState.gameVersion) {
                    console.log(`Game version mismatch. Loaded: ${parsedState.gameVersion || 'older'}, Current: ${initialGameState.gameVersion}. Applying migration logic if any.`);
                    // –ü—Ä–∏–º–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–∏: –µ—Å–ª–∏ –≤ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ –Ω–µ –±—ã–ª–æ contentQualityLevel
                    if (!parsedState.contentQualityLevel) {
                        gameState.contentQualityLevel = 1;
                        addLogEntry('–û–±–Ω–æ–≤–ª–µ–Ω—ã –∏–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏.', 'info');
                    }
                    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –∏–≥—Ä—ã –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–æ —Ç–µ–∫—É—â–µ–π
                    gameState.gameVersion = initialGameState.gameVersion;
                    saveGameState(); // –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                }

                // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞
                if (parsedState.log && Array.isArray(parsedState.log)) {
                    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ, –µ—Å–ª–∏ –∏—Ö —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
                    gameState.log = parsedState.log.slice(0, 50);
                    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ DOM
                    gameState.log.forEach(entry => {
                        const li = document.createElement('li');
                        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏, –µ—Å–ª–∏ –≤ –ª–æ–≥–µ —Ç–æ–ª—å–∫–æ timestamp
                        const date = new Date(entry.timestamp);
                        li.textContent = `${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}: ${entry.message}`;
                        li.classList.add(`log-${entry.type}`);
                        eventLogList.prepend(li);
                    });
                }


                // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å—Ç –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ —Ç–∞–π–º–µ—Ä
                if (gameState.postInProduction && gameState.postInProduction.timeLeft > 0) {
                    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    const timePassedSinceLastSave = (Date.now() - (gameState.lastActiveTime || Date.now())) / 1000;
                    gameState.postInProduction.timeLeft = Math.max(0, gameState.postInProduction.timeLeft - timePassedSinceLastSave);
                    console.log(`Post in production found. Time left: ${gameState.postInProduction.timeLeft}s`);

                    if (gameState.postInProduction.timeLeft <= 0) {
                        console.log('Post completed offline.');
                        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è completePost –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
                        // –ï—Å–ª–∏ –≤ —Å—Ç–∞—Ä–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–µ –±—ã–ª–æ results, –Ω—É–∂–Ω–æ –∏—Ö —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç
                        if (!gameState.postInProduction.results) {
                            const idea = gameSettings.contentIdeas[gameState.selectedTheme]?.find(i => i.id === gameState.postInProduction.ideaId);
                            const formatMod = gameSettings.formatModifiers[gameState.postInProduction.formatType];
                            if (idea && formatMod) {
                                let finalSubscribers = Math.round(idea.baseSubscribers * formatMod.subscriberMultiplier);
                                let finalEarnings = Math.round(idea.baseEarnings * formatMod.earningsMultiplier);
                                let moodChange = formatMod.moodImpact;
                                if (gameState.contentQualityLevel > 1) {
                                    const qualityBenefit = gameSettings.upgradeBenefits.contentQuality;
                                    finalSubscribers = Math.round(finalSubscribers * qualityBenefit.subscriberMultiplier);
                                    finalEarnings = Math.round(finalEarnings * qualityBenefit.earningsMultiplier);
                                    moodChange += qualityBenefit.moodBonus;
                                }
                                gameState.postInProduction.results = {
                                    subscribers: finalSubscribers,
                                    earnings: finalEarnings,
                                    moodChange: moodChange
                                };
                            } else {
                                console.error('Could not reconstruct post results during offline completion. Defaulting to 0.');
                                gameState.postInProduction.results = { subscribers: 0, earnings: 0, moodChange: 0 };
                            }
                        }
                        completePost(gameState.postInProduction.ideaId, gameState.postInProduction.formatType, gameState.postInProduction.results);
                    } else {
                        // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä —Å –æ—Å—Ç–∞–≤—à–∏–º—Å—è –≤—Ä–µ–º–µ–Ω–µ–º
                        startPostProductionTimer(
                            gameState.postInProduction.ideaId,
                            gameState.postInProduction.formatType,
                            gameState.postInProduction.duration, // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                            gameState.postInProduction.results,
                            gameState.postInProduction.timeLeft
                        );
                    }
                }
                addLogEntry('–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω–æ.', 'info');
                console.log('Game state loaded:', gameState);
            } else {
                console.log('No saved game state found. Starting new game.');
                addLogEntry('–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç).', 'info');
                gameState = { ...initialGameState };
            }
        } catch (e) {
            console.error('Error loading or parsing game state from Local Storage:', e);
            addLogEntry('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É.', 'error');
            localStorage.removeItem('channelControlGameState'); // –û—á–∏—â–∞–µ–º –±–∏—Ç–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            gameState = { ...initialGameState };
        }
    }

    // startPostProductionTimer —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    function startPostProductionTimer(ideaId, formatType, originalDuration, results, timeLeft) {
        if (!gameState.postInProduction) {
            gameState.postInProduction = {};
        }
        gameState.postInProduction.ideaId = ideaId;
        gameState.postInProduction.formatType = formatType;
        gameState.postInProduction.duration = originalDuration; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        gameState.postInProduction.timeLeft = timeLeft;
        gameState.postInProduction.results = results; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        
        if (postTypeInProduction) {
            const idea = gameSettings.contentIdeas[gameState.selectedTheme]?.find(i => i.id === ideaId);
            postTypeInProduction.textContent = idea ? `${idea.name} (${formatType})` : '–ü–æ—Å—Ç';
        }
        if (postProductionStatus) postProductionStatus.style.display = 'block';
        if (createPostButton) createPostButton.disabled = true;
        updateCharacterState('typing', timeLeft);

        // –ï—Å–ª–∏ timeLeft —É–∂–µ 0 –∏–ª–∏ –º–µ–Ω—å—à–µ, –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä, –∞ —Å—Ä–∞–∑—É –∑–∞–≤–µ—Ä—à–∞–µ–º
        if (timeLeft <= 0) {
            completePost(ideaId, formatType, results);
            return;
        }

        const startTime = Date.now() - (originalDuration - timeLeft) * 1000; // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ startTime –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        gameState.postInProduction.timer = setInterval(() => {
            const elapsed = Math.floor((Date.now() - startTime) / 1000);
            gameState.postInProduction.timeLeft = Math.max(0, originalDuration - elapsed);

            if (gameState.postInProduction.timeLeft <= 0) {
                clearInterval(gameState.postInProduction.timer);
                completePost(ideaId, formatType, results); // –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            } else {
                if (postProductionTimeRemaining) postProductionTimeRemaining.textContent = gameState.postInProduction.timeLeft;
                const progress = ((originalDuration - gameState.postInProduction.timeLeft) / originalDuration) * 100;
                if (postProductionProgressFill) updateProgressBar(postProductionProgressFill, progress);
            }
        }, 1000);
    }

    // === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏ ===
    function showModal(modalElement) {
        if (!modalElement) {
            console.error('showModal received a null element.');
            return;
        }
        modalElement.style.display = 'flex';
        setTimeout(() => modalElement.classList.add('visible'), 10);
        if (tg.HapticFeedback && typeof tg.HapticFeedback.impactOccurred === 'function') {
            tg.HapticFeedback.impactOccurred('medium');
        }
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" Telegram –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∫–∏
        if (tg.BackButton && typeof tg.BackButton.show === 'function') {
            tg.BackButton.show();
        }

        // –ï—Å–ª–∏ —ç—Ç–æ –º–æ–¥–∞–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω—è–µ–º –µ–µ –∏–¥–µ—è–º–∏
        if (modalElement === createPostModal) {
            populateContentIdeas();
        }
    }

    function hideModal(modalElement) {
        if (!modalElement) {
            console.error('hideModal received a null element.');
            return;
        }
        modalElement.classList.remove('visible');
        setTimeout(() => modalElement.style.display = 'none', 300);
        if (tg.HapticFeedback && typeof tg.HapticFeedback.impactOccurred === 'function') {
            tg.HapticFeedback.impactOccurred('light');
        }
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –º–æ–¥–∞–ª–æ–∫ –∏ –º—ã –≤ —Å—Ç—É–¥–∏–∏, –º–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å BackButton
        // –ò–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –µ–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≤–∏–¥–∏–º–æ–π, –µ—Å–ª–∏ —Ç–∞–∫ –∑–∞–¥—É–º–∞–Ω–æ
        if (!isAnyModalOpen() && studioContainer && studioContainer.classList.contains('visible') && tg.BackButton && typeof tg.BackButton.hide === 'function') {
            // tg.BackButton.hide(); // –º–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–∫—Ä—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ —Å—Ç—É–¥–∏–∏ –±–µ–∑ –º–æ–¥–∞–ª–æ–∫
        }
    }

    function isAnyModalOpen() {
        return (createPostModal && createPostModal.classList.contains('visible')) ||
               (upgradesModal && upgradesModal.classList.contains('visible')) ||
               (logModal && logModal.classList.contains('visible'));
    }


    // === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã ===
    function initGame() {
        console.log('initGame started.');
        if (tg) {
            if (typeof tg.ready === 'function') tg.ready();
            if (typeof tg.expand === 'function') tg.expand();

            if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
                const user = tg.initDataUnsafe.user;
                if (telegramUsernameDisplay) telegramUsernameDisplay.textContent = user.username || user.first_name || '–î–æ—Ä–æ–≥–æ–π –ò–≥—Ä–æ–∫';
                if (user.photo_url && userPhotoEl) {
                    userPhotoEl.src = user.photo_url;
                } else if (userPhotoEl) {
                    userPhotoEl.src = 'placeholder-avatar.png';
                }
            } else {
                console.warn('Telegram user data not available or incomplete in initDataUnsafe. Using placeholder.');
                if (telegramUsernameDisplay) telegramUsernameDisplay.textContent = '–î–æ—Ä–æ–≥–æ–π –ò–≥—Ä–æ–∫';
                if (userPhotoEl) userPhotoEl.src = 'placeholder-avatar.png';
            }
        } else {
            console.warn('Telegram WebApp object is not available.');
        }

        if (gameVersionEl) {
            gameVersionEl.textContent = `v${initialGameState.gameVersion}`; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ initialGameState
        }

        loadGameState(); // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã

        if (!gameState.gameStarted) {
            console.log('Game not started yet. Showing theme selection screen.');
            showScreen(themeSelectionScreen);
            // –°–∫—Ä—ã–≤–∞–µ–º BackButton, –µ—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã (—Ç–∞–º –æ–±—ã—á–Ω–æ –Ω–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞)
            if (tg && tg.BackButton && typeof tg.BackButton.hide === 'function') {
                tg.BackButton.hide();
            }
        } else {
            console.log('Game already started. Showing studio container.');
            showScreen(studioContainer);
            updateUI();
            startTrendCycle();
            startEnergyRestoreCycle();
            calculateOfflineProgress();
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º BackButton —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –º—ã —É–∂–µ –≤ "—Å—Ç—É–¥–∏–∏" –∏–ª–∏ –Ω–∞ –¥—Ä—É–≥–∏—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–∫—Ä–∞–Ω–∞—Ö
            if (tg && tg.BackButton && typeof tg.BackButton.show === 'function') {
                tg.BackButton.show();
            }
        }
        console.log('initGame finished.');
    }

    // === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ===

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–µ–ª–æ–∞–¥–µ—Ä–∞
    const preloaderFill = document.querySelector('.preloader-progress-bar-fill');
    if (preloaderFill && preloader) {
        console.log('Preloader elements found. Starting preloader animation.');
        setTimeout(() => {
            updateProgressBar(preloaderFill, 100);
        }, 100);
        setTimeout(() => {
            preloader.classList.add('hidden');
            preloader.addEventListener('transitionend', () => {
                initGame();
            }, { once: true });
        }, gameSettings.preloaderDuration);
    } else {
        console.warn('Preloader elements not found or preloader is null. Initializing game immediately.');
        initGame();
    }


    // –í—ã–±–æ—Ä —Ç–µ–º—ã
    if (themeSelectionScreen) {
        const themeCards = themeSelectionScreen.querySelectorAll('.theme-card');
        themeCards.forEach(card => {
            card.addEventListener('click', () => {
                themeCards.forEach(c => c.classList.remove('selected'));
                card.classList.add('selected');
                gameState.selectedTheme = card.dataset.theme;
                if (selectThemeButton) selectThemeButton.disabled = false;
                if (tg.HapticFeedback && typeof tg.HapticFeedback.impactOccurred === 'function') {
                    tg.HapticFeedback.impactOccurred('light');
                }
            });
        });

        if (selectThemeButton) {
            selectThemeButton.addEventListener('click', () => {
                if (gameState.selectedTheme) {
                    addLogEntry(`–í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞: ${gameState.selectedTheme}.`, 'info');
                    showScreen(welcomeScreen);
                    if (tg.HapticFeedback && typeof tg.HapticFeedback.notificationOccurred === 'function') {
                        tg.HapticFeedback.notificationOccurred('success');
                    }
                }
            });
        }
    }

    // –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –ø–æ—Å–ª–µ —ç–∫—Ä–∞–Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    if (startGameButton) {
        startGameButton.addEventListener('click', () => {
            gameState.gameStarted = true;
            saveGameState();
            showScreen(cutsceneScreen);
            if (tg.HapticFeedback && typeof tg.HapticFeedback.impactOccurred === 'function') {
                tg.HapticFeedback.impactOccurred('medium');
            }
            startCutscene();
        });
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç—Å—Ü–µ–Ω–æ–π
    function startCutscene() {
        console.log('Starting cutscene...');
        if (cutsceneSlides.length === 0) {
            console.warn('Cutscene slides not found, skipping cutscene.');
            showScreen(studioContainer);
            updateUI();
            startTrendCycle();
            startEnergyRestoreCycle();
            if (tg && tg.BackButton && typeof tg.BackButton.show === 'function') {
                tg.BackButton.show(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Å—Ç—É–¥–∏—é
            }
            return;
        }

        currentSlideIndex = 0;
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–ø–µ—Ä–µ–¥, –∫ –°—Ç—É–¥–∏–∏!" –≤ –Ω–∞—á–∞–ª–µ –∫–∞—Ç—Å—Ü–µ–Ω—ã
        if (continueToStudioButton) {
            continueToStudioButton.style.display = 'none';
            continueToStudioButton.classList.remove('visible'); // –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∫–ª–∞—Å—Å —Ç–æ–∂–µ —É–¥–∞–ª–µ–Ω
        }

        showCutsceneSlide(currentSlideIndex);

        const cutsceneTimer = setInterval(() => {
            currentSlideIndex++;
            console.log(`Cutscene: advancing to slide index ${currentSlideIndex}`);
            if (currentSlideIndex < cutsceneSlides.length) {
                showCutsceneSlide(currentSlideIndex);
                // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª–∞–π–¥ (–≥–¥–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–Ω–æ–ø–∫–∞)
                if (currentSlideIndex === cutsceneSlides.length - 1) {
                    console.log('Cutscene: Reached last slide, showing continue button.');
                    if (continueToStudioButton) {
                        continueToStudioButton.style.display = 'block';
                        setTimeout(() => {
                            if (continueToStudioButton) continueToStudioButton.classList.add('visible');
                        }, 50);
                    }
                    clearInterval(cutsceneTimer); // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä, —Ç–∞–∫ –∫–∞–∫ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞
                }
            } else {
                clearInterval(cutsceneTimer);
                console.warn('Cutscene: Timer finished, but continue button might not have appeared. Forcing display.');
                if (continueToStudioButton && continueToStudioButton.style.display === 'none') {
                     continueToStudioButton.style.display = 'block';
                     setTimeout(() => {
                        if (continueToStudioButton) continueToStudioButton.classList.add('visible');
                    }, 50);
                }
            }
        }, gameSettings.cutsceneSlideDuration);
    }

    function showCutsceneSlide(index) {
        cutsceneSlides.forEach((slide, i) => {
            slide.classList.remove('active');
            if (i === index) {
                slide.classList.add('active');
            }
        });
        console.log(`Cutscene: Showing slide ${index + 1}/${cutsceneSlides.length}`);
    }


    // –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å—Ç—É–¥–∏—é –∏–∑ –∫–∞—Ç—Å—Ü–µ–Ω—ã
    if (continueToStudioButton) {
        continueToStudioButton.addEventListener('click', () => {
            showScreen(studioContainer);
            updateUI();
            startTrendCycle();
            startEnergyRestoreCycle();
            if (tg && tg.BackButton && typeof tg.BackButton.show === 'function') {
                tg.BackButton.show();
            }
            if (tg.HapticFeedback && typeof tg.HapticFeedback.impactOccurred === 'function') {
                tg.HapticFeedback.impactOccurred('medium');
            }
        });
    }

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–æ–∫
    if (createPostButton) {
        createPostButton.addEventListener('click', () => showModal(createPostModal));
    }
    if (upgradesButton) {
        upgradesButton.addEventListener('click', () => showModal(upgradesModal));
    }
    if (logButton) {
        logButton.addEventListener('click', () => showModal(logModal));
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–æ–∫
    closeModalButtons.forEach(button => {
        button.addEventListener('click', (event) => {
            const modalId = event.target.dataset.modalId;
            const modalToClose = document.getElementById(modalId);
            if (modalToClose) {
                hideModal(modalToClose);
            }
        });
    });

    // –î–µ–π—Å—Ç–≤–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if (upgradeContentQualityButton) {
        upgradeContentQualityButton.addEventListener('click', upgradeContentQuality);
    }

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫ –∫–Ω–æ–ø–∫–µ "–ù–∞–∑–∞–¥" Telegram Web App
    if (tg.BackButton && typeof tg.BackButton.onClick === 'function') {
        tg.BackButton.onClick(() => {
            console.log('Telegram BackButton clicked.');
            // –õ–æ–≥–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–æ–∫
            if (createPostModal && createPostModal.classList.contains('visible')) {
                hideModal(createPostModal);
                return;
            }
            if (upgradesModal && upgradesModal.classList.contains('visible')) {
                hideModal(upgradesModal);
                return;
            }
            if (logModal && logModal.classList.contains('visible')) {
                hideModal(logModal);
                return;
            }

            // –õ–æ–≥–∏–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
            if (welcomeScreen && welcomeScreen.classList.contains('visible')) {
                showScreen(themeSelectionScreen);
                // –ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–µ–º—ã, —Å–∫—Ä—ã–≤–∞–µ–º BackButton, —Ç.–∫. —Ç–∞–º –æ–Ω –æ–±—ã—á–Ω–æ –Ω–µ –Ω—É–∂–µ–Ω
                if (tg.BackButton && typeof tg.BackButton.hide === 'function') {
                    tg.BackButton.hide();
                }
                return;
            }
            if (cutsceneScreen && cutsceneScreen.classList.contains('visible')) {
                if (currentSlideIndex > 0) {
                    currentSlideIndex--;
                    showCutsceneSlide(currentSlideIndex);
                    // –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–∏—Å—å —Å–æ "–®–∞–≥–∞ 4" –Ω–∞ "–®–∞–≥ 3", —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
                    if (continueToStudioButton) continueToStudioButton.style.display = 'none';
                } else {
                    showScreen(welcomeScreen);
                }
                return;
            }
            // –ï—Å–ª–∏ –º—ã –≤ —Å—Ç—É–¥–∏–∏ –∏ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –º–æ–¥–∞–ª–æ–∫
            if (studioContainer && studioContainer.classList.contains('visible')) {
                 console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ù–∞–∑–∞–¥" –≤ —Å—Ç—É–¥–∏–∏. –ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç (–∏–ª–∏ –º–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–∫—Ä—ã—Ç—å).');
                 if (tg.HapticFeedback && typeof tg.HapticFeedback.notificationOccurred === 'function') {
                     tg.HapticFeedback.notificationOccurred('error');
                 }
                 // tg.close(); // –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∑–∞–∫—Ä—ã–≤–∞–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ —Å—Ç—É–¥–∏–∏
                 return;
            }

            // –ï—Å–ª–∏ –Ω–∏–∫–∞–∫–æ–π –∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –∏–ª–∏ –º–æ–¥–∞–ª–∫–∞ –Ω–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–∫—Ä—ã—Ç—å
            if (tg && typeof tg.close === 'function') {
                // tg.close();
            }
        });
    } else {
        console.warn('Telegram BackButton API not fully available or onClick not a function.');
    }


    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
    window.addEventListener('beforeunload', saveGameState);
});
