document.addEventListener('DOMContentLoaded', () => {
    const tg = window.Telegram.WebApp;

    // –≠–∫—Ä–∞–Ω—ã –∏ –æ–≤–µ—Ä–ª–µ–∏
    const preloader = document.getElementById('preloader');
    const themeSelectionScreen = document.getElementById('theme-selection-screen');
    const welcomeScreen = document.getElementById('welcome-screen');
    const cutsceneScreen = document.getElementById('cutscene-screen');
    
    const gameInterface = document.getElementById('game-interface'); // –ì–ª–∞–≤–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    const gameScreensContainer = document.getElementById('game-screens-container');
    const allGameScreens = gameScreensContainer ? gameScreensContainer.querySelectorAll('.game-screen') : [];
    const studioScreen = document.getElementById('studioScreen');
    const createPostScreen = document.getElementById('createPostScreen');
    const upgradesScreen = document.getElementById('upgradesScreen');
    const rankingsScreen = document.getElementById('rankingsScreen');
    
    const startGameButton = document.getElementById('start-game-button');
    const cutsceneSlides = cutsceneScreen ? cutsceneScreen.querySelectorAll('.cutscene-slide') : [];
    let currentSlideIndex = 0;
    const telegramUsernameDisplay = document.getElementById('telegram-username-display');
    const userPhotoEl = document.getElementById('user-photo');

    const characterEl = document.getElementById('character-sprite');
    let characterStateTimeout; 

    const channelNameOnMonitorEl = document.getElementById('channel-name-on-monitor');
    const subscribersCountEl = document.getElementById('subscribers-count');
    const balanceCountEl = document.getElementById('balance-count');
    const audienceMoodDisplay = document.getElementById('audience-mood-display');
    const gameVersionEl = document.getElementById('game-version');

    const currentTrendDisplayMonitor = document.getElementById('current-trend-display-monitor');
    const trendDescriptionMonitorEl = document.getElementById('trend-description-monitor');

    // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const navButtons = document.querySelectorAll('.bottom-nav .nav-button');
    const goToCreatePostTabButton = document.getElementById('go-to-create-post-tab'); // –ö–Ω–æ–ø–∫–∞ –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–µ
    
    const studioSidePanel = document.getElementById('studio-side-panel');
    const openLogButton = document.getElementById('open-log-button'); // –í –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    const logModal = document.getElementById('log-modal');
    const closeModalButtons = document.querySelectorAll('.close-modal-button');

    // –ö–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤ (—Ç–µ–ø–µ—Ä—å –Ω–∞ —ç–∫—Ä–∞–Ω–µ createPostScreen)
    const postTextButton = document.querySelector('#createPostScreen #post-text-button');
    const postMemeButton = document.querySelector('#createPostScreen #post-meme-button');
    const postVideoButton = document.querySelector('#createPostScreen #post-video-button');
    
    // –£–ª—É—á—à–µ–Ω–∏—è (—Ç–µ–ø–µ—Ä—å –Ω–∞ —ç–∫—Ä–∞–Ω–µ upgradesScreen)
    const upgradeContentQualityButton = document.querySelector('#upgradesScreen #upgrade-content-quality');
    const upgradeCostSpan = document.querySelector('#upgradesScreen #upgrade-content-quality .upgrade-cost'); // –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã
    
    const eventLogUl = document.getElementById('event-log'); // –í –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –ª–æ–≥–∞

    // –í—Å–ø–ª—ã–≤–∞—é—â–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    const liveFeedbackContainer = document.getElementById('live-feedback-container');
    const MAX_FEEDBACK_ITEMS = 7;
    const positiveComments = ["–ö—Ä—É—Ç–æ!", "–õ—É—á—à–∏–π –ø–æ—Å—Ç!", "–û–≥–æ–Ω—å üî•", "–õ—é–±–ª—é —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª!", "–ü–æ–¥–ø–∏—Å–∞–ª—Å—è!", "üëçüëçüëç"];
    const neutralComments = ["–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ.", "–•–º, –Ω–µ–ø–ª–æ—Ö–æ.", "–ü–æ–π–¥–µ—Ç.", "–ù–æ—Ä–º.", "ü§î"];
    const negativeComments = ["–ß—Ç–æ —ç—Ç–æ?", "–°–∫—É—á–Ω–æ.", "–û—Ç–ø–∏—Å–∫–∞.", "üëé", "–ù–µ –ø–æ–Ω—è–ª —é–º–æ—Ä–∞."];
    const reactionEmojis = ['‚ù§Ô∏è', 'üòÇ', 'üéâ', 'ü§Ø', 'üëÄ'];


    tg.ready();
    tg.expand();

    let defaultGameState = {
        channelName: "–ú–æ–π –ö–∞–Ω–∞–ª", subscribers: 0, balance: 100, engagementRate: 0,
        audienceMood: 75, contentQualityMultiplier: 1, postsMade: 0,
        gameVersion: "0.8.0", 
        theme: null, themeModifiers: { text: 1, meme: 1, video: 1 },
        currentTrend: null, trendPostsRemaining: 0,
    };
    let gameState = { ...defaultGameState };

    const CHARACTER_STATES = { IDLE_BLINKING: 'idle_blinking', TYPING: 'typing', HAPPY: 'happy', SLEEPING: 'sleeping' };

    function setCharacterState(newState, durationMs = 0) { /* ... –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –ø–æ–ª–Ω–æ–º –∫–æ–¥–µ ... */ }

    function showTopLevelScreen(screenElement) { // –î–ª—è –ø—Ä–µ–ª–æ–∞–¥–µ—Ä–∞, –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã, –≤–µ–ª–∫–æ–º–∞, –∫–∞—Ç—Å—Ü–µ–Ω—ã, gameInterface
        [preloader, themeSelectionScreen, welcomeScreen, cutsceneScreen, gameInterface].forEach(el => {
            if (el) { el.classList.remove('visible'); el.style.display = 'none';}
        });
        if (screenElement) {
            screenElement.style.display = 'flex'; 
            requestAnimationFrame(() => { requestAnimationFrame(() => { screenElement.classList.add('visible'); }); });
        }
    }

    function setActiveGameScreen(targetScreenId) {
        allGameScreens.forEach(screen => {
            if (screen.id === targetScreenId) {
                screen.style.display = 'flex'; // –∏–ª–∏ 'block' –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä—Å—Ç–∫–∏ —ç–∫—Ä–∞–Ω–∞
                requestAnimationFrame(() => screen.classList.add('active-screen'));
                if (screen.id === 'studioScreen' && studioSidePanel) studioSidePanel.style.display = 'flex';
                else if (studioSidePanel) studioSidePanel.style.display = 'none';

            } else {
                screen.classList.remove('active-screen');
                screen.style.display = 'none';
            }
        });
        navButtons.forEach(button => {
            button.classList.toggle('active', button.dataset.targetScreen === targetScreenId);
        });
        // –°–∫—Ä–æ–ª–ª –Ω–∞–≤–µ—Ä—Ö –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–∫–ª–∞–¥–∫–∏
        if(gameScreensContainer) gameScreensContainer.scrollTop = 0;
    }
    
    function playCutscene() { /* ... */ showTopLevelScreen(cutsceneScreen); /* ... */ }
    function showNextSlide() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ, –Ω–æ –≤ –∫–æ–Ω—Ü–µ –≤—ã–∑—ã–≤–∞–µ—Ç startGameplay() ... */ }
    function initializeGameFlow() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç showTopLevelScreen ... */
        const savedState = localStorage.getItem('channelSimGameState_v8'); // –ù–æ–≤—ã–π –∫–ª—é—á
        if (savedState) { /* ... */ if (gameState.theme) { showWelcomeScreen(); return; } }
        /* ... */ showThemeSelectionScreen();
    }
    function showThemeSelectionScreen() { /* ... */ showTopLevelScreen(themeSelectionScreen); }
    function showWelcomeScreen() { /* ... */ showTopLevelScreen(welcomeScreen); }
    function startGameplay() { 
        loadGame(); 
        showTopLevelScreen(gameInterface); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Å—å –∏–≥—Ä–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        setActiveGameScreen('studioScreen'); // –î–µ–ª–∞–µ–º —Å—Ç—É–¥–∏—é –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        setCharacterState(CHARACTER_STATES.IDLE_BLINKING);
        logEvent(`–ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞! –ö–∞–Ω–∞–ª: ${gameState.channelName}.`, "info");
    }

    function loadGame() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ, –∫–ª—é—á v8 ... */
        const savedState = localStorage.getItem('channelSimGameState_v8');
        if (savedState) { /* ... */ }
        if (gameVersionEl) gameVersionEl.textContent = `v${gameState.gameVersion}`;
        updateUI(); updateTrendUI(); checkUpgradeButtonStatus();
    }
    function saveGame() { localStorage.setItem('channelSimGameState_v8', JSON.stringify(gameState)); }
    function logEvent(message, type = 'info') { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
    function updateUI() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
    function checkUpgradeButtonStatus() { 
        if (!upgradeContentQualityButton) return;
        const cost = parseInt(upgradeContentQualityButton.dataset.cost);
        upgradeContentQualityButton.disabled = gameState.balance < cost;
        if (upgradeCostSpan) upgradeCostSpan.textContent = cost; // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ü–µ–Ω—ã
    }
    function updateTrendUI() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
    function generateNewTrend() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
    function getThemeDisplayName(themeKey) { /* ... */ }
    function getPostTypeName(typeKey) { /* ... */ }

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –Ω–∏–∂–Ω–µ–º—É –º–µ–Ω—é
    navButtons.forEach(button => {
        button.addEventListener('click', () => {
            setActiveGameScreen(button.dataset.targetScreen);
        });
    });
    if(goToCreatePostTabButton) goToCreatePostTabButton.addEventListener('click', () => setActiveGameScreen('createPostScreen'));


    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ª–æ–≥–∞
    function openModal(modalElement) { if (modalElement) { modalElement.style.display = 'flex'; requestAnimationFrame(() => modalElement.classList.add('visible')); } }
    function closeModal(modalElement) { if (modalElement) { modalElement.classList.remove('visible'); setTimeout(() => { modalElement.style.display = 'none'; }, 300); } }
    if(openLogButton) openLogButton.addEventListener('click', () => openModal(logModal));
    closeModalButtons.forEach(button => { button.addEventListener('click', () => { const modalId = button.dataset.modalId; const modalToClose = document.getElementById(modalId); closeModal(modalToClose); }); });


    // –í—Å–ø–ª—ã–≤–∞—é—â–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    function showFeedback(text, isEmoji = false, username = null) { /* ... –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –ø–æ–ª–Ω–æ–º –∫–æ–¥–µ ... */ }

    // –î–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä—ã
    function handlePostAction(postType, baseSubMin, baseSubMax, baseMoneyMin, baseMoneyMax, erMin, erMax) {
        setCharacterState(CHARACTER_STATES.TYPING); 
        setTimeout(() => {
            // ... (–í–°–Ø –ª–æ–≥–∏–∫–∞ –ø–æ—Å—Ç–∞: themeMod, moodMultiplier, trendBonusMultiplier, —Ä–∞—Å—á–µ—Ç subGain, moneyGain, ER, moodChange, –æ—Ç–ø–∏—Å–∫–∏) ...
            // –ö–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –ø–æ–ª–Ω–æ–º –∫–æ–¥–µ script.js
            const themeModKey = postType; const themeMod = gameState.themeModifiers[themeModKey] || 1;
            const moodMultiplier = 0.8 + (gameState.audienceMood / 100) * 0.4; let trendBonusMultiplier = 1;
            if (gameState.currentTrend && gameState.currentTrend.type === postType && gameState.trendPostsRemaining > 0) { trendBonusMultiplier = parseFloat(gameState.currentTrend.bonus); gameState.audienceMood = Math.min(gameState.audienceMood + 5, 100); logEvent(`–ü–æ—Å—Ç "${getPostTypeName(postType)}" –ø–æ–ø–∞–ª –≤ —Ç—Ä–µ–Ω–¥! –ë–æ–Ω—É—Å x${trendBonusMultiplier}!`, 'info');}
            const subGain = Math.floor((Math.random() * (baseSubMax - baseSubMin + 1) + baseSubMin) * gameState.contentQualityMultiplier * themeMod * moodMultiplier * trendBonusMultiplier);
            const moneyGain = Math.floor((Math.random() * (baseMoneyMax - baseMoneyMin + 1) + baseMoneyMin) * gameState.contentQualityMultiplier);
            gameState.subscribers += subGain; gameState.balance += moneyGain; gameState.postsMade++;
            let moodChange = 0; if (subGain > 2) moodChange = Math.floor(gameState.contentQualityMultiplier * 1.5); else if (subGain < 0 && gameState.subscribers > 0) moodChange = -5; gameState.audienceMood = Math.min(Math.max(gameState.audienceMood + moodChange, 0), 100);
            if (gameState.audienceMood < 30 && gameState.subscribers > 10) { const uC = (30 - gameState.audienceMood) / 30; if (Math.random() < uC * 0.05) { const unsub = Math.min(gameState.subscribers, Math.floor(Math.random()*(gameState.subscribers*0.03)+1)); gameState.subscribers -= unsub; logEvent(`–ê—É–¥–∏—Ç–æ—Ä–∏—è –Ω–µ–¥–æ–≤–æ–ª—å–Ω–∞! –û—Ç–ø–∏—Å–∞–ª–æ—Å—å ${unsub} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.`, 'error'); gameState.audienceMood = Math.max(gameState.audienceMood - 3, 0);}}
            logEvent(`–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω ${getPostTypeName(postType)}! +${subGain} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, +$${moneyGain}.`, 'success');
            if (gameState.currentTrend && gameState.trendPostsRemaining > 0) { gameState.trendPostsRemaining--; }
            if ((!gameState.currentTrend || gameState.trendPostsRemaining <= 0) && gameState.postsMade > 2) { if (Math.random() < 0.20) { generateNewTrend(); }}
            
            if (subGain > 8) { setCharacterState(CHARACTER_STATES.HAPPY, 3000); } else { setCharacterState(CHARACTER_STATES.IDLE_BLINKING); }
            updateUI(); saveGame(); checkUpgradeButtonStatus();
            tg.HapticFeedback.notificationOccurred('success');
            
            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–¥–±–µ–∫–∞
            const feedbackCount = Math.floor(Math.random() * 3) + 2; 
            for (let i = 0; i < feedbackCount; i++) {
                setTimeout(() => { 
                    const randomUser = `User${Math.floor(Math.random() * 1000)}`;
                    if (Math.random() < 0.3) { showFeedback(reactionEmojis[Math.floor(Math.random() * reactionEmojis.length)], true, randomUser); } 
                    else { let commentArray; if (gameState.audienceMood > 70 && subGain > 5) commentArray = positiveComments; else if (gameState.audienceMood < 40 || subGain < 1) commentArray = negativeComments; else commentArray = neutralComments; showFeedback(commentArray[Math.floor(Math.random() * commentArray.length)], false, randomUser); }
                }, i * (Math.random() * 500 + 300)); 
            }
            setActiveGameScreen('studioScreen'); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω —Å—Ç—É–¥–∏–∏ –ø–æ—Å–ª–µ –ø–æ—Å—Ç–∞
        }, 700); 
    }

     if(postTextButton) postTextButton.addEventListener('click', () => handlePostAction('text', 1, 5, 2, 10, 1, 5));
     if(postMemeButton) postMemeButton.addEventListener('click', () => handlePostAction('meme', 3, 10, 1, 5, 2, 8));
     if(postVideoButton) postVideoButton.addEventListener('click', () => handlePostAction('video', 8, 20, 7, 18, 3, 10));
     if(upgradeContentQualityButton) upgradeContentQualityButton.addEventListener('click', () => { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ, –Ω–æ –±–µ–∑ closeModal ... */ 
        const cost = parseInt(upgradeContentQualityButton.dataset.cost);
        if (gameState.balance >= cost) {
            /* ... */
            upgradeContentQualityButton.querySelector('.upgrade-cost').textContent = newCost; // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ü–µ–Ω—ã –Ω–∞ –∫–Ω–æ–ø–∫–µ
            setCharacterState(CHARACTER_STATES.HAPPY, 1500); 
            // –ú–æ–∂–Ω–æ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞—Ç—å —ç–∫—Ä–∞–Ω —É–ª—É—á—à–µ–Ω–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        } /* ... */
     });

    if (themeSelectionScreen) { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
    
    showTopLevelScreen(preloader); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–ª–æ–∞–¥–µ—Ä –ø–µ—Ä–≤—ã–º
    setTimeout(() => {
        if (preloader) { preloader.classList.remove('visible'); setTimeout(() => { if(preloader) preloader.style.display = 'none'; }, 700); }
        initializeGameFlow();
    }, 2500); 

    if (startGameButton) { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ, –≤—ã–∑—ã–≤–∞–µ—Ç playCutscene() ... */ }
    
    if (tg.BackButton) { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ, –Ω–æ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ª–æ–≥–∞ –∏–ª–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∏–≥—Ä—É */
        tg.BackButton.show();
        tg.BackButton.onClick(() => {
            if (logModal && logModal.classList.contains('visible')) { closeModal(logModal); }
            else if (gameInterface && gameInterface.classList.contains('visible')) { saveGame(); logEvent("–í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã (–ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω).", "info"); tg.close(); }
            // –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏—è –¥–ª—è cutsceneScreen, welcomeScreen, themeSelectionScreen, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            else { tg.close(); }
        });
    }
});
