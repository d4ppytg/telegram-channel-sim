document.addEventListener('DOMContentLoaded', () => {
    const tg = window.Telegram.WebApp;

    // –≠–∫—Ä–∞–Ω—ã –∏ –æ–≤–µ—Ä–ª–µ–∏
    const preloader = document.getElementById('preloader');
    const themeSelectionScreen = document.getElementById('theme-selection-screen');
    const welcomeScreen = document.getElementById('welcome-screen');
    const cutsceneScreen = document.getElementById('cutscene-screen');
    const studioScreenContainer = document.getElementById('studio-screen-container'); // –ì–ª–∞–≤–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    
    const startGameButton = document.getElementById('start-game-button');
    const cutsceneSlides = cutsceneScreen ? cutsceneScreen.querySelectorAll('.cutscene-slide') : [];
    let currentSlideIndex = 0;
    const telegramUsernameDisplay = document.getElementById('telegram-username-display');
    const userPhotoEl = document.getElementById('user-photo');

    const characterEl = document.getElementById('character-sprite');
    let characterStateTimeout; 

    // –≠–ª–µ–º–µ–Ω—Ç—ã "–°—Ç—É–¥–∏–∏"
    const channelNameOnMonitorEl = document.getElementById('channel-name-on-monitor');
    const subscribersCountEl = document.getElementById('subscribers-count');
    const balanceCountEl = document.getElementById('balance-count');
    const audienceMoodDisplay = document.getElementById('audience-mood-display');
    const gameVersionEl = document.getElementById('game-version'); 
    const currentTrendDisplayMonitor = document.getElementById('current-trend-display-monitor');
    const trendDescriptionMonitorEl = document.getElementById('trend-description-monitor');
    
    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ —Å—Ç—É–¥–∏–∏
    const createPostButtonMonitor = document.getElementById('create-post-button-monitor'); // –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª–∫—É
    const openUpgradesButton = document.getElementById('open-upgrades-button'); // –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª–∫—É
    const openLogButton = document.getElementById('open-log-button'); // –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª–∫—É
    
    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    const createPostModal = document.getElementById('create-post-modal');
    const upgradesModal = document.getElementById('upgrades-modal');
    const logModal = document.getElementById('log-modal');
    const closeModalButtons = document.querySelectorAll('.close-modal-button');

    // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–Ω–∞—Ö
    const postTextButton = document.querySelector('#create-post-modal #post-text-button');
    const postMemeButton = document.querySelector('#create-post-modal #post-meme-button');
    const postVideoButton = document.querySelector('#create-post-modal #post-video-button');
    const upgradeContentQualityButton = document.querySelector('#upgrades-modal #upgrade-content-quality');
    const upgradeCostSpan = document.querySelector('#upgrades-modal .upgrade-cost');
    const eventLogUl = document.getElementById('event-log');

    const liveFeedbackContainer = document.getElementById('live-feedback-container');
    const MAX_FEEDBACK_ITEMS = 7;
    const positiveComments = ["–ö—Ä—É—Ç–æ!", "–õ—É—á—à–∏–π –ø–æ—Å—Ç!", "–û–≥–æ–Ω—å üî•", "–õ—é–±–ª—é!", "–ü–æ–¥–ø–∏—Å–∫–∞!", "üëçüëçüëç", "–ì–µ–Ω–∏–∞–ª—å–Ω–æ!"];
    const neutralComments = ["–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ.", "–ù–µ–ø–ª–æ—Ö–æ.", "–ü–æ–π–¥–µ—Ç.", "–ù–æ—Ä–º.", "ü§î", "–û–∫."];
    const negativeComments = ["–ß—Ç–æ —ç—Ç–æ?", "–°–∫—É—á–Ω–æ.", "–û—Ç–ø–∏—Å–∫–∞.", "üëé", "–ù–µ –ø–æ–Ω—è–ª.", "–£–∂–∞—Å."];
    const reactionEmojis = ['‚ù§Ô∏è', 'üòÇ', 'üéâ', 'ü§Ø', 'üëÄ', 'üíØ'];

    tg.ready();
    tg.expand();

    let defaultGameState = {
        channelName: "–ú–æ–π –ö–∞–Ω–∞–ª", subscribers: 0, balance: 100, engagementRate: 0,
        audienceMood: 75, contentQualityMultiplier: 1, postsMade: 0,
        gameVersion: "1.0.0", 
        theme: null, themeModifiers: { text: 1, meme: 1, video: 1 },
        currentTrend: null, trendPostsRemaining: 0,
    };
    let gameState = { ...defaultGameState };

    const CHARACTER_STATES = { IDLE_BLINKING: 'idle_blinking', TYPING: 'typing', HAPPY: 'happy', SLEEPING: 'sleeping' };

    function setCharacterState(newState, durationMs = 0) { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }

    function showScreen(screenElementToShow) { // –£–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–º–∏ –æ–≤–µ—Ä–ª–µ—è–º–∏ –∏ –≥–ª–∞–≤–Ω—ã–º —ç–∫—Ä–∞–Ω–æ–º —Å—Ç—É–¥–∏–∏
        [preloader, themeSelectionScreen, welcomeScreen, cutsceneScreen, studioScreenContainer].forEach(el => {
            if (el) { el.classList.remove('visible'); el.style.display = 'none';}
        });
         // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        [createPostModal, upgradesModal, logModal].forEach(modal => {
            if (modal && modal !== screenElementToShow) { // –ù–µ —Å–∫—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ —ç—Ç–æ —Å–∞–º–∞ –º–æ–¥–∞–ª–∫–∞
                 modal.classList.remove('visible'); modal.style.display = 'none';
            }
        });

        if (screenElementToShow) {
            screenElementToShow.style.display = 'flex'; 
            requestAnimationFrame(() => { requestAnimationFrame(() => { screenElementToShow.classList.add('visible'); }); });
        }
    }
    
    function playCutscene() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ, –≤ –∫–æ–Ω—Ü–µ –≤—ã–∑—ã–≤–∞–µ—Ç startGameplay() ... */ }
    function showNextSlide() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
    
    function initializeGameFlow() { 
        const savedState = localStorage.getItem('channelSimGameState_v11'); 
        if (savedState) { const parsedState = JSON.parse(savedState); gameState = { ...defaultGameState, ...parsedState }; if (gameState.theme) { showWelcomeScreen(); return; } }
        gameState = { ...defaultGameState }; saveGame(); showThemeSelectionScreen();
    }
    function showThemeSelectionScreen() { logEvent("–¢—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–±–æ—Ä —Ç–µ–º–∞—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞.", "info"); showScreen(themeSelectionScreen); }
    function showWelcomeScreen() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ, —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –¢–ì –∏ –≤—ã–∑–æ–≤–æ–º showScreen ... */ }
    
    function startGameplay() { 
        loadGame(); 
        showScreen(studioScreenContainer); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—Ç—É–¥–∏–∏
        setCharacterState(CHARACTER_STATES.IDLE_BLINKING);
        logEvent(`–°—Ç—É–¥–∏—è –æ—Ç–∫—Ä—ã—Ç–∞! –ö–∞–Ω–∞–ª: ${gameState.channelName}.`, "info");
    }

    function loadGame() { 
        const savedState = localStorage.getItem('channelSimGameState_v11');
        if (savedState) { const parsedState = JSON.parse(savedState); gameState = { ...defaultGameState, ...parsedState };}
        if (gameVersionEl) gameVersionEl.textContent = `v${gameState.gameVersion}`;
        updateUI(); updateTrendUI(); checkUpgradeButtonStatus();
    }
    function saveGame() { localStorage.setItem('channelSimGameState_v11', JSON.stringify(gameState)); }
    function logEvent(message, type = 'info') { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
    function updateUI() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
    function checkUpgradeButtonStatus() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
    function updateTrendUI() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
    function generateNewTrend() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
    function getThemeDisplayName(themeKey) { /* ... */ }
    function getPostTypeName(typeKey) { /* ... */ }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏
    function openModal(modalElement) {
        if (modalElement) {
            modalElement.style.display = 'flex';
            requestAnimationFrame(() => { requestAnimationFrame(() => { modalElement.classList.add('visible'); }); });
        }
    }
    function closeModal(modalElement) {
        if (modalElement) {
            modalElement.classList.remove('visible');
            setTimeout(() => { modalElement.style.display = 'none'; }, 300); // –í—Ä–µ–º—è CSS-–∞–Ω–∏–º–∞—Ü–∏–∏ .modal-overlay
        }
    }

    if(createPostButtonMonitor) createPostButtonMonitor.addEventListener('click', () => openModal(createPostModal));
    if(openUpgradesButton) openUpgradesButton.addEventListener('click', () => openModal(upgradesModal));
    if(openLogButton) openLogButton.addEventListener('click', () => openModal(logModal));
    closeModalButtons.forEach(button => { button.addEventListener('click', () => { const modalId = button.dataset.modalId; const modalToClose = document.getElementById(modalId); closeModal(modalToClose); }); });

    // –í—Å–ø–ª—ã–≤–∞—é—â–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    function showFeedback(text, isEmoji = false, username = null) { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }

    // –î–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä—ã
    function handlePostAction(postType, baseSubMin, baseSubMax, baseMoneyMin, baseMoneyMax, erMin, erMax) {
        setCharacterState(CHARACTER_STATES.TYPING); 
        setTimeout(() => {
            // ... (–í–°–Ø –ª–æ–≥–∏–∫–∞ –ø–æ—Å—Ç–∞ –∫–∞–∫ —Ä–∞–Ω—å—à–µ: themeMod, moodMultiplier, trendBonusMultiplier, —Ä–∞—Å—á–µ—Ç subGain, moneyGain, ER, moodChange, –æ—Ç–ø–∏—Å–∫–∏, logEvent –¥–ª—è –ø–æ—Å—Ç–∞) ...
            // ... –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–¥–±–µ–∫–∞ ...
            const feedbackCount = Math.floor(Math.random() * 3) + 2; 
            for (let i = 0; i < feedbackCount; i++) { /* ... */ }
            
            // –†–µ–∞–∫—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (—É–∂–µ –µ—Å—Ç—å –≤ –∫–æ–¥–µ –≤—ã—à–µ, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –Ω–µ –ø—Ä–æ—Å–∏–ª–∏ –º–µ–Ω—è—Ç—å)
            if (subGain > 8) { setCharacterState(CHARACTER_STATES.HAPPY, 3000); } 
            else { setCharacterState(CHARACTER_STATES.IDLE_BLINKING); }

            updateUI(); saveGame(); checkUpgradeButtonStatus();
            tg.HapticFeedback.notificationOccurred('success');
            closeModal(createPostModal); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
        }, 700); 
    }

     if(postTextButton) postTextButton.addEventListener('click', () => handlePostAction('text', 1, 5, 2, 10, 1, 5));
     if(postMemeButton) postMemeButton.addEventListener('click', () => handlePostAction('meme', 3, 10, 1, 5, 2, 8));
     if(postVideoButton) postVideoButton.addEventListener('click', () => handlePostAction('video', 8, 20, 7, 18, 3, 10));
     if(upgradeContentQualityButton) upgradeContentQualityButton.addEventListener('click', () => { 
        // ... (–ª–æ–≥–∏–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –∫–∞–∫ —Ä–∞–Ω—å—à–µ) ...
        if (gameState.balance >= cost) { 
            /* ... */ 
            setCharacterState(CHARACTER_STATES.HAPPY, 1500); 
            closeModal(upgradesModal); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–ª—É—á—à–µ–Ω–∏–π
        } /* ... */
     });

    if (themeSelectionScreen) { /* ... –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –∫–∞–∫ —Ä–∞–Ω—å—à–µ, –Ω–æ –≤—ã–∑—ã–≤–∞—é—Ç showWelcomeScreen() ... */ }
    
    showScreen(preloader);
    setTimeout(() => {
        if (preloader) { preloader.classList.remove('visible'); setTimeout(() => { if(preloader) preloader.style.display = 'none'; }, 700); }
        initializeGameFlow();
    }, 2500); 

    if (startGameButton) { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ, –≤—ã–∑—ã–≤–∞–µ—Ç playCutscene() ... */ }
    
    if (tg.BackButton) {
        tg.BackButton.show();
        tg.BackButton.onClick(() => {
            const visibleModal = document.querySelector('.modal-overlay.visible');
            if (visibleModal) { closeModal(visibleModal); }
            else if (studioScreenContainer && studioScreenContainer.classList.contains('visible')) { 
                saveGame(); logEvent("–í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã (–ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω).", "info"); tg.close(); 
            }
            // ... (—É—Å–ª–æ–≤–∏—è –¥–ª—è cutsceneScreen, welcomeScreen, themeSelectionScreen) ...
            else { tg.close(); }
        });
    }
});
