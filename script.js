document.addEventListener('DOMContentLoaded', () => {
    const tg = window.Telegram.WebApp;

    // –≠–∫—Ä–∞–Ω—ã –∏ –æ–≤–µ—Ä–ª–µ–∏
    const preloader = document.getElementById('preloader');
    const themeSelectionScreen = document.getElementById('theme-selection-screen');
    const welcomeScreen = document.getElementById('welcome-screen');
    const cutsceneScreen = document.getElementById('cutscene-screen');
    const studioScreenContainer = document.getElementById('studio-screen-container'); 
    
    const startGameButton = document.getElementById('start-game-button');
    const cutsceneSlides = cutsceneScreen ? cutsceneScreen.querySelectorAll('.cutscene-slide') : [];
    let currentSlideIndex = 0;
    const telegramUsernameDisplay = document.getElementById('telegram-username-display');
    const userPhotoEl = document.getElementById('user-photo');

    const characterEl = document.getElementById('character-sprite');
    let characterStateTimeout; 

    // –≠–ª–µ–º–µ–Ω—Ç—ã "–°—Ç—É–¥–∏–∏"
    const channelNameOnMonitorEl = document.getElementById('channel-name-on-monitor');
    const subscribersCountEl = document.getElementById('subscribers-count');
    const balanceCountEl = document.getElementById('balance-count');
    const audienceMoodDisplay = document.getElementById('audience-mood-display');
    const gameVersionEl = document.getElementById('game-version'); 
    const currentTrendDisplayMonitor = document.getElementById('current-trend-display-monitor');
    const trendDescriptionMonitorEl = document.getElementById('trend-description-monitor');
    
    // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ —Ç–µ–∫—Å—Ç–∞
    const openTextLabButton = document.getElementById('open-text-lab-button'); 
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å—Ç—É–¥–∏–∏
    const studioSidePanel = document.getElementById('studio-side-panel'); 
    const openUpgradesButton = document.getElementById('open-upgrades-button'); 
    const openLogButton = document.getElementById('open-log-button'); 
    
    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è –£–ª—É—á—à–µ–Ω–∏–π –∏ –õ–æ–≥–∞
    const upgradesModal = document.getElementById('upgrades-modal');
    const logModal = document.getElementById('log-modal');
    const closeModalButtons = document.querySelectorAll('.close-modal-button');

    // –≠–ª–µ–º–µ–Ω—Ç—ã –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –¢–ï–ö–°–¢–û–í–û–ì–û –ø–æ—Å—Ç–∞
    const textPostLabScreen = document.getElementById('text-post-lab-screen');
    const textLabStepTitleSelection = document.getElementById('text-lab-step-title-selection');
    const titleOptionsGrid = document.querySelector('#text-lab-step-title-selection .title-options-grid');
    const textLabStepWordFlow = document.getElementById('text-lab-step-word-flow');
    const wordFlowTimerDisplay = document.getElementById('word-flow-time-left');
    const wordFlowQualityScoreDisplay = document.getElementById('word-flow-quality-score');
    const wordFlowArea = document.querySelector('#text-lab-step-word-flow .word-flow-area');
    const collectedTextPreview = document.getElementById('—Å–æ–±—Ä–∞–Ω–Ω—ã–π-—Ç–µ–∫—Å—Ç-–ø–æ—Å—Ç–∞-–≤-–ª–∞–±–µ');
    const wordsCollectedCountDisplay = document.getElementById('words-collected-count');
    const textLabStepPublish = document.getElementById('text-lab-step-publish');
    const finalPostQualityDisplay = document.getElementById('final-post-quality-display');
    const publishTextPostFromLabButton = document.getElementById('publish-text-post-from-lab-button');
    const cancelTextPostLabButton = document.getElementById('cancel-text-post-lab-button');

    // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ú–ï–ú–û–í –∏ –í–ò–î–ï–û (–∏—â–µ–º –∏—Ö –≤ —Å—Ç–∞—Ä–æ–π –º–æ–¥–∞–ª–∫–µ, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Å—Ç–∞–ª–∞—Å—å)
    // –ï—Å–ª–∏ –º–æ–¥–∞–ª–∫–∏ #create-post-modal –Ω–µ—Ç, —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±—É–¥—É—Ç null, –Ω–æ –æ—à–∏–±–∫–∏ –Ω–µ –±—É–¥–µ—Ç
    const postMemeButton = document.querySelector('#create-post-modal #post-meme-button');
    const postVideoButton = document.querySelector('#create-post-modal #post-video-button');
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã —É–ª—É—á—à–µ–Ω–∏–π –≤ –º–æ–¥–∞–ª–∫–µ
    const upgradeContentQualityButton = document.querySelector('#upgrades-modal #upgrade-content-quality');
    const upgradeCostSpan = document.querySelector('#upgrades-modal .upgrade-cost');
    const eventLogUl = document.getElementById('event-log');

    const liveFeedbackContainer = document.getElementById('live-feedback-container');
    const MAX_FEEDBACK_ITEMS = 7;
    const positiveComments = ["–ö—Ä—É—Ç–æ!", "–õ—É—á—à–∏–π –ø–æ—Å—Ç!", "–û–≥–æ–Ω—å üî•", "–õ—é–±–ª—é!", "–ü–æ–¥–ø–∏—Å–∫–∞!", "üëçüëçüëç", "–ì–µ–Ω–∏–∞–ª—å–Ω–æ!"];
    const neutralComments = ["–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ.", "–ù–µ–ø–ª–æ—Ö–æ.", "–ü–æ–π–¥–µ—Ç.", "–ù–æ—Ä–º.", "ü§î", "–û–∫."];
    const negativeComments = ["–ß—Ç–æ —ç—Ç–æ?", "–°–∫—É—á–Ω–æ.", "–û—Ç–ø–∏—Å–∫–∞.", "üëé", "–ù–µ –ø–æ–Ω—è–ª.", "–£–∂–∞—Å."];
    const reactionEmojis = ['‚ù§Ô∏è', 'üòÇ', 'üéâ', 'ü§Ø', 'üëÄ', 'üíØ'];

    tg.ready();
    tg.expand();

    let defaultGameState = {
        channelName: "–ú–æ–π –ö–∞–Ω–∞–ª", subscribers: 0, balance: 100, engagementRate: 0,
        audienceMood: 75, contentQualityMultiplier: 1, postsMade: 0,
        gameVersion: "1.1.0", 
        theme: null, themeModifiers: { text: 1, meme: 1, video: 1 },
        currentTrend: null, trendPostsRemaining: 0,
    };
    let gameState = { ...defaultGameState };

    const CHARACTER_STATES = { IDLE_BLINKING: 'idle_blinking', TYPING: 'typing', HAPPY: 'happy', SLEEPING: 'sleeping' };

    let currentTextLabState = { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }; // –î–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ —Ç–µ–∫—Å—Ç–∞

    function setCharacterState(newState, durationMs = 0) { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }

    function showScreen(screenElementToShow) {
        // –î–æ–±–∞–≤–ª—è–µ–º textPostLabScreen –≤ —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤
        [preloader, themeSelectionScreen, welcomeScreen, cutsceneScreen, studioScreenContainer, textPostLabScreen, upgradesModal, logModal].forEach(el => {
            if (el && el !== screenElementToShow) { 
                el.classList.remove('visible'); el.style.display = 'none';
            }
        });
        if (screenElementToShow) {
            screenElementToShow.style.display = 'flex'; 
            requestAnimationFrame(() => { requestAnimationFrame(() => { screenElementToShow.classList.add('visible'); }); });
        }
    }
    
    function playCutscene() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
    function showNextSlide() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
    
    function initializeGameFlow() { 
        const savedState = localStorage.getItem('channelSimGameState_v12'); // –ù–æ–≤—ã–π –∫–ª—é—á
        if (savedState) { /* ... */ }
        /* ... */ showThemeSelectionScreen();
    }
    function showThemeSelectionScreen() { /* ... */ showScreen(themeSelectionScreen); }
    function showWelcomeScreen() { /* ... */ showScreen(welcomeScreen); }
    
    function startGameplay() { 
        loadGame(); 
        showScreen(studioScreenContainer); 
        setCharacterState(CHARACTER_STATES.IDLE_BLINKING);
        logEvent(`–°—Ç—É–¥–∏—è –æ—Ç–∫—Ä—ã—Ç–∞! –ö–∞–Ω–∞–ª: ${gameState.channelName}.`, "info");
        if (studioSidePanel) studioSidePanel.style.display = 'flex'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å —Å—Ç—É–¥–∏–∏
    }

    function loadGame() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ, –∫–ª—é—á v12 ... */ }
    function saveGame() { localStorage.setItem('channelSimGameState_v12', JSON.stringify(gameState)); }
    function logEvent(message, type = 'info') { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
    function updateUI() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
    function checkUpgradeButtonStatus() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
    function updateTrendUI() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
    function generateNewTrend() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
    function getThemeDisplayName(themeKey) { /* ... */ }
    function getPostTypeName(typeKey) { /* ... */ }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏
    function openModal(modalElement) { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
    function closeModal(modalElement) { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ, –Ω–æ –ë–ï–ó showScreen(studioScreenContainer) ... */ 
        if (modalElement) {
            modalElement.classList.remove('visible');
            setTimeout(() => { modalElement.style.display = 'none'; }, 300); 
        }
    }
    
    // –û—Ç–∫—Ä—ã—Ç–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
    if (openTextLabButton) {
        openTextLabButton.addEventListener('click', () => {
            setCharacterState(CHARACTER_STATES.TYPING); 
            startTextPostLab();
        });
    }
    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–æ–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π –∏ –ª–æ–≥–∞
    if(openUpgradesButton) openUpgradesButton.addEventListener('click', () => openModal(upgradesModal));
    if(openLogButton) openLogButton.addEventListener('click', () => openModal(logModal));
    closeModalButtons.forEach(button => { button.addEventListener('click', () => { const modalId = button.dataset.modalId; const modalToClose = document.getElementById(modalId); closeModal(modalToClose); }); });


    // --- –õ–û–ì–ò–ö–ê –õ–ê–ë–û–†–ê–¢–û–†–ò–ò –¢–ï–ö–°–¢–û–í–û–ì–û –ü–û–°–¢–ê ---
    function resetTextLab() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
    function startTextPostLab() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ, –≤—ã–∑—ã–≤–∞–µ—Ç showScreen(textPostLabScreen) ... */ }
    function selectTextLabTitle(titleData) { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
    function startWordFlowGame() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
    function spawnWord() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
    function handleWordClick(event) { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
    function endWordFlowGame() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }

    if(publishTextPostFromLabButton) {
        publishTextPostFromLabButton.addEventListener('click', () => {
            const labQualityMultiplier = 1 + (Math.max(0, currentTextLabState.qualityScore) / 50);
            handlePostAction('text', 1, 5, 2, 10, 1, 5, labQualityMultiplier, currentTextLabState.selectedTitle.text);
            showScreen(studioScreenContainer); 
            if (studioSidePanel) studioSidePanel.style.display = 'flex';
            setCharacterState(CHARACTER_STATES.IDLE_BLINKING);
        });
    }
    if(cancelTextPostLabButton) {
        cancelTextPostLabButton.addEventListener('click', () => {
            clearInterval(currentTextLabState.wordFlowTimeout); clearInterval(currentTextLabState.wordSpawnInterval);
            if(wordFlowArea) wordFlowArea.innerHTML = '';
            logEvent("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", "info");
            showScreen(studioScreenContainer);
            if (studioSidePanel) studioSidePanel.style.display = 'flex';
            setCharacterState(CHARACTER_STATES.IDLE_BLINKING);
        });
    }
    // --- –ö–û–ù–ï–¶ –õ–û–ì–ò–ö–ò –õ–ê–ë–û–†–ê–¢–û–†–ò–ò ---


    // –í—Å–ø–ª—ã–≤–∞—é—â–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    function showFeedback(text, isEmoji = false, username = null) { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }

    // –î–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä—ã
    function handlePostAction(postType, baseSubMin, baseSubMax, baseMoneyMin, baseMoneyMax, erMin, erMax, labQualityMultiplier = 1, postTitle = "–ù–æ–≤—ã–π –ø–æ—Å—Ç") {
        // setCharacterState(CHARACTER_STATES.TYPING); // –£–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º –∏–ª–∏ –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
        // setTimeout —É–±—Ä–∞–Ω, —Ç–∞–∫ –∫–∞–∫ "—Ä–∞–±–æ—Ç–∞" —Ç–µ–ø–µ—Ä—å –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –∏–ª–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤
            
        // ... (–í–°–Ø –ª–æ–≥–∏–∫–∞ –ø–æ—Å—Ç–∞: themeMod, moodMultiplier, trendBonusMultiplier, —Ä–∞—Å—á–µ—Ç subGain, moneyGain –∏ —Ç.–¥.) ...
        // –ö–∞–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ–ª–Ω–æ–º –∫–æ–¥–µ JS, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –º–Ω–µ –¥–∞–≤–∞–ª–∏ (–≥–¥–µ –æ—à–∏–±–∫–∞ –±—ã–ª–∞)
            
        logEvent(`–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω ${getPostTypeName(postType)}: "${postTitle}"! +${subGain} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, +$${moneyGain}.`, 'success');

        if (gameState.currentTrend && gameState.trendPostsRemaining > 0) { gameState.trendPostsRemaining--; }
        if ((!gameState.currentTrend || gameState.trendPostsRemaining <= 0) && gameState.postsMade > 2) { if (Math.random() < 0.20) { generateNewTrend(); }}
        
        if (subGain > 8) { setCharacterState(CHARACTER_STATES.HAPPY, 3000); } 
        else { setCharacterState(CHARACTER_STATES.IDLE_BLINKING); }

        updateUI(); saveGame(); checkUpgradeButtonStatus();
        tg.HapticFeedback.notificationOccurred('success');
        
        const feedbackCount = Math.floor(Math.random() * 3) + 2; 
        for (let i = 0; i < feedbackCount; i++) { /* ... –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–¥–±–µ–∫–∞ ... */ }
            
        // closeModal(createPostModal); // –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è
                                     // –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å–∞–º–∞.
                                     // –ï—Å–ª–∏ –º–µ–º—ã/–≤–∏–¥–µ–æ –±—É–¥—É—Ç –≤ –º–æ–¥–∞–ª–∫–µ, –∏–º –Ω—É–∂–µ–Ω —Å–≤–æ–π closeModal.
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ú–ï–ú –∏ –í–ò–î–ï–û (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ HTML –∏ –Ω–∞–π–¥–µ–Ω—ã)
     if(postMemeButton) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞
        postMemeButton.addEventListener('click', () => { 
             logEvent("–°–æ–∑–¥–∞–Ω–∏–µ –ú–µ–º–æ–≤ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!", "warning");
             // –î–ª—è —Ç–µ—Å—Ç–∞ –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å handlePostAction —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
             // handlePostAction('meme', 3, 10, 1, 5, 2, 8, 1, "–°–º–µ—à–Ω–æ–π –ú–µ–º");
             // closeModal(createPostModal); // –ï—Å–ª–∏ –±—ã —ç—Ç–æ –±—ã–ª–æ –≤ –º–æ–¥–∞–ª–∫–µ createPostModal
        });
     } else {
        // console.log("–ö–Ω–æ–ø–∫–∞ postMemeButton –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ DOM"); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
     }

     if(postVideoButton) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞
        postVideoButton.addEventListener('click', () => {
             logEvent("–°–æ–∑–¥–∞–Ω–∏–µ –í–∏–¥–µ–æ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!", "warning");
             // handlePostAction('video', 8, 20, 7, 18, 3, 10, 1, "–ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–µ –í–∏–¥–µ–æ");
             // closeModal(createPostModal); // –ï—Å–ª–∏ –±—ã —ç—Ç–æ –±—ã–ª–æ –≤ –º–æ–¥–∞–ª–∫–µ createPostModal
        });
     } else {
        // console.log("–ö–Ω–æ–ø–∫–∞ postVideoButton –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ DOM");
     }

     // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –£–ª—É—á—à–µ–Ω–∏—è –ö–∞—á–µ—Å—Ç–≤–∞ (–≤ –º–æ–¥–∞–ª–∫–µ #upgrades-modal)
     if(upgradeContentQualityButton) {
        upgradeContentQualityButton.addEventListener('click', () => { 
            const cost = parseInt(upgradeContentQualityButton.dataset.cost);
            if (gameState.balance >= cost) {
                gameState.balance -= cost; 
                gameState.contentQualityMultiplier = parseFloat((gameState.contentQualityMultiplier + 0.2).toFixed(1));
                const newCost = Math.floor(cost * 1.5); 
                upgradeContentQualityButton.dataset.cost = newCost;
                if(upgradeCostSpan) upgradeCostSpan.textContent = newCost;
                else upgradeContentQualityButton.textContent = `–£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–°—Ç–æ–∏–º–æ—Å—Ç—å: $${newCost})`;
                
                logEvent(`–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É–ª—É—á—à–µ–Ω–æ! –ú–Ω–æ–∂–∏—Ç–µ–ª—å: ${gameState.contentQualityMultiplier}x.`, 'success');
                gameState.audienceMood = Math.min(gameState.audienceMood + 2, 100);
                updateUI(); saveGame(); checkUpgradeButtonStatus();
                tg.HapticFeedback.impactOccurred('medium');
                setCharacterState(CHARACTER_STATES.HAPPY, 1500); 
                closeModal(upgradesModal); 
            } else { 
                logEvent("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.", 'error'); 
                tg.HapticFeedback.notificationOccurred('error');
            }
        });
    }


    // --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ü–û–†–Ø–î–û–ö –ó–ê–ü–£–°–ö–ê ---
    if (themeSelectionScreen) {
        const themeCards = themeSelectionScreen.querySelectorAll('.theme-card');
        themeCards.forEach(card => {
            card.addEventListener('click', () => {
                const selectedTheme = card.dataset.theme; 
                // ... (–ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã, –∫–∞–∫ —Ä–∞–Ω—å—à–µ) ...
                saveGame(); showWelcomeScreen();
            });
        });
    }
    
    showScreen(preloader);
    setTimeout(() => {
        if (preloader) { preloader.classList.remove('visible'); setTimeout(() => { if(preloader) preloader.style.display = 'none'; }, 700); }
        initializeGameFlow();
    }, 2500); 

    if (startGameButton) { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ, –≤—ã–∑—ã–≤–∞–µ—Ç playCutscene() ... */ }
    
    if (tg.BackButton) { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ, –Ω–æ closeModal —Ç–µ–ø–µ—Ä—å –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç showScreen ... */ }
});
