document.addEventListener('DOMContentLoaded', () => {
    const tg = window.Telegram.WebApp;

    // –≠–∫—Ä–∞–Ω—ã –∏ –æ–≤–µ—Ä–ª–µ–∏
    const preloader = document.getElementById('preloader');
    const themeSelectionScreen = document.getElementById('theme-selection-screen');
    const welcomeScreen = document.getElementById('welcome-screen');
    const cutsceneScreen = document.getElementById('cutscene-screen');
    const gameInterface = document.getElementById('game-interface');
    const gameScreensContainer = document.getElementById('game-screens-container');
    const allGameScreens = gameScreensContainer ? gameScreensContainer.querySelectorAll('.game-screen') : [];
    
    const startGameButton = document.getElementById('start-game-button');
    const cutsceneSlides = cutsceneScreen ? cutsceneScreen.querySelectorAll('.cutscene-slide') : [];
    let currentSlideIndex = 0;
    const telegramUsernameDisplay = document.getElementById('telegram-username-display');
    const userPhotoEl = document.getElementById('user-photo');

    const characterEl = document.getElementById('character-sprite');
    let characterStateTimeout; 

    const subscribersCountEl = document.getElementById('subscribers-count');
    const balanceCountEl = document.getElementById('balance-count');
    const audienceMoodDisplay = document.getElementById('audience-mood-display');
    
    const channelNameOnMonitorEl = document.getElementById('channel-name-on-monitor');
    const gameVersionEl = document.getElementById('game-version'); 
    const currentTrendDisplayMonitor = document.getElementById('current-trend-display-monitor');
    const trendDescriptionMonitorEl = document.getElementById('trend-description-monitor');
    
    const studioSidePanel = document.getElementById('studio-side-panel'); 
    const openLogButton = document.getElementById('open-log-button');
    const logModal = document.getElementById('log-modal');
    const closeModalButtons = document.querySelectorAll('.close-modal-button');
    const eventLogUl = document.getElementById('event-log');

    // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞
    const monitorContentArea = document.getElementById('monitor-content-area');
    const monitorIdleContent = document.getElementById('monitor-idle-content');
    const initiatePostCreationButton = document.getElementById('initiate-post-creation-button');
    const monitorSteps = {
        selectType: document.getElementById('monitor-step-select-type'),
        selectThemeText: document.getElementById('monitor-step-select-theme-text'),
        qualityText: document.getElementById('monitor-step-quality-text'),
    };
    const monitorPostTypeButtons = monitorSteps.selectType ? monitorSteps.selectType.querySelectorAll('.monitor-button') : [];
    const monitorThemeTextButtons = monitorSteps.selectThemeText ? monitorSteps.selectThemeText.querySelectorAll('.monitor-theme-button') : [];
    const effortSlider = document.getElementById('effort-slider');
    const effortLevelDisplay = document.getElementById('effort-level-display');
    const selectedThemeNameDisplay = document.querySelector('#monitor-step-quality-text .selected-theme-name-monitor');
    const monitorPublishButton = document.querySelector('#monitor-step-quality-text .monitor-publish-button');
    const monitorCancelButtons = document.querySelectorAll('#monitor-content-area .monitor-cancel-button');
    const monitorBackButtons = document.querySelectorAll('#monitor-content-area .monitor-back-button');
    let currentPostCreation = { type: null, themeId: null, effort: 2 };

    // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const navButtons = document.querySelectorAll('.bottom-nav .nav-button');

    // –ö–Ω–æ–ø–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π (–µ—Å–ª–∏ –±—É–¥—É—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º —ç–∫—Ä–∞–Ω–µ)
    const upgradeContentQualityButton = document.querySelector('#upgradesScreen #upgrade-content-quality');
    const upgradeCostSpan = document.querySelector('#upgradesScreen .upgrade-cost');
    
    // –í—Å–ø–ª—ã–≤–∞—é—â–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    const liveFeedbackContainer = document.getElementById('live-feedback-container');
    const MAX_FEEDBACK_ITEMS = 7;
    const positiveComments = ["–ö—Ä—É—Ç–æ!", "–õ—É—á—à–∏–π –ø–æ—Å—Ç!", "–û–≥–æ–Ω—å üî•", "–õ—é–±–ª—é!", "–ü–æ–¥–ø–∏—Å–∫–∞!", "üëçüëçüëç", "–ì–µ–Ω–∏–∞–ª—å–Ω–æ!"];
    const neutralComments = ["–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ.", "–ù–µ–ø–ª–æ—Ö–æ.", "–ü–æ–π–¥–µ—Ç.", "–ù–æ—Ä–º.", "ü§î", "–û–∫."];
    const negativeComments = ["–ß—Ç–æ —ç—Ç–æ?", "–°–∫—É—á–Ω–æ.", "–û—Ç–ø–∏—Å–∫–∞.", "üëé", "–ù–µ –ø–æ–Ω—è–ª.", "–£–∂–∞—Å."];
    const reactionEmojis = ['‚ù§Ô∏è', 'üòÇ', 'üéâ', 'ü§Ø', 'üëÄ', 'üíØ'];

    tg.ready();
    tg.expand();

    let defaultGameState = {
        channelName: "–ú–æ–π –ö–∞–Ω–∞–ª", subscribers: 0, balance: 100, engagementRate: 0,
        audienceMood: 75, contentQualityMultiplier: 1, postsMade: 0,
        gameVersion: "1.0.0", 
        theme: null, themeModifiers: { text: 1, meme: 1, video: 1 },
        currentTrend: null, trendPostsRemaining: 0,
    };
    let gameState = { ...defaultGameState };

    const CHARACTER_STATES = { IDLE_BLINKING: 'idle_blinking', TYPING: 'typing', HAPPY: 'happy', SLEEPING: 'sleeping' };

    function setCharacterState(newState, durationMs = 0) { /* ... –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –ø–æ–ª–Ω–æ–º –∫–æ–¥–µ ... */ }
    function showTopLevelScreen(screenElementToShow) { /* ... –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –ø–æ–ª–Ω–æ–º –∫–æ–¥–µ ... */ }
    function setActiveGameScreen(targetScreenId) { /* ... –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –ø–æ–ª–Ω–æ–º –∫–æ–¥–µ ... */ }
    function playCutscene() { /* ... –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –ø–æ–ª–Ω–æ–º –∫–æ–¥–µ ... */ }
    function showNextSlide() { /* ... –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –ø–æ–ª–Ω–æ–º –∫–æ–¥–µ ... */ }
    function initializeGameFlow() { 
        const savedState = localStorage.getItem('channelSimGameState_v10_interactiveMonitor'); 
        if (savedState) { const parsedState = JSON.parse(savedState); gameState = { ...defaultGameState, ...parsedState }; if (gameState.theme) { showWelcomeScreen(); return; } }
        gameState = { ...defaultGameState }; saveGame(); showThemeSelectionScreen();
    }
    function showThemeSelectionScreen() { logEvent("–¢—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–±–æ—Ä —Ç–µ–º–∞—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞.", "info"); showTopLevelScreen(themeSelectionScreen); }
    function showWelcomeScreen() { /* ... –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –ø–æ–ª–Ω–æ–º –∫–æ–¥–µ ... */ showTopLevelScreen(welcomeScreen); }
    function startGameplay() { 
        loadGame(); showTopLevelScreen(gameInterface); 
        setActiveGameScreen('studioScreen'); 
        setCharacterState(CHARACTER_STATES.IDLE_BLINKING);
        logEvent(`–ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞! –ö–∞–Ω–∞–ª: ${gameState.channelName}.`, "info");
    }
    function loadGame() { 
        const savedState = localStorage.getItem('channelSimGameState_v10_interactiveMonitor');
        if (savedState) { const parsedState = JSON.parse(savedState); gameState = { ...defaultGameState, ...parsedState };}
        if (gameVersionEl) gameVersionEl.textContent = `v${gameState.gameVersion}`;
        updateUI(); updateTrendUI(); checkUpgradeButtonStatus();
    }
    function saveGame() { localStorage.setItem('channelSimGameState_v10_interactiveMonitor', JSON.stringify(gameState)); }
    function logEvent(message, type = 'info') { /* ... –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –ø–æ–ª–Ω–æ–º –∫–æ–¥–µ ... */ }
    function updateUI() { /* ... –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –ø–æ–ª–Ω–æ–º –∫–æ–¥–µ ... */ }
    function checkUpgradeButtonStatus() { /* ... –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –ø–æ–ª–Ω–æ–º –∫–æ–¥–µ ... */ }
    function updateTrendUI() { /* ... –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –ø–æ–ª–Ω–æ–º –∫–æ–¥–µ ... */ }
    function generateNewTrend() { /* ... –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –ø–æ–ª–Ω–æ–º –∫–æ–¥–µ ... */ }
    function getThemeDisplayName(themeKey) { /* ... */ }
    function getPostTypeName(typeKey) { /* ... */ }

    // --- –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –ú–û–ù–ò–¢–û–† ---
    function showMonitorStep(stepElementToShow) {
        if (monitorIdleContent) monitorIdleContent.style.display = 'none';
        Object.values(monitorSteps).forEach(step => { if (step) step.style.display = 'none';});
        if (stepElementToShow) {
            stepElementToShow.style.display = 'flex';
            setCharacterState(CHARACTER_STATES.TYPING); 
        } else {
            if (monitorIdleContent) monitorIdleContent.style.display = 'flex';
            setCharacterState(CHARACTER_STATES.IDLE_BLINKING);
        }
    }
    if (initiatePostCreationButton) {
        initiatePostCreationButton.addEventListener('click', () => {
            currentPostCreation = { type: null, themeId: null, effort: effortSlider ? parseInt(effortSlider.value) : 2 };
            showMonitorStep(monitorSteps.selectType);
        });
    }
    monitorCancelButtons.forEach(button => button.addEventListener('click', () => showMonitorStep(null)));
    monitorBackButtons.forEach(button => {
        button.addEventListener('click', () => {
            const targetStepId = button.dataset.targetStepId; // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ targetStepId
            showMonitorStep(document.getElementById(targetStepId) || monitorSteps.selectType);
        });
    });
    monitorPostTypeButtons.forEach(button => {
        button.addEventListener('click', () => {
            currentPostCreation.type = button.dataset.postType;
            if (currentPostCreation.type === 'text') showMonitorStep(monitorSteps.selectThemeText);
            // –î–æ–±–∞–≤–∏—Ç—å else if –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∏ –∏—Ö —à–∞–≥–æ–≤ –≤—ã–±–æ—Ä–∞ —Ç–µ–º
            else { logEvent(`–í—ã–±–æ—Ä —Ç–µ–º—ã –¥–ª—è "${currentPostCreation.type}" –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.`, "warning"); showMonitorStep(null); }
        });
    });
    if (monitorSteps.selectThemeText) {
        monitorSteps.selectThemeText.querySelectorAll('.monitor-theme-button').forEach(button => {
            button.addEventListener('click', () => {
                currentPostCreation.themeId = button.dataset.themeId;
                if(selectedThemeNameDisplay) selectedThemeNameDisplay.textContent = button.textContent;
                showMonitorStep(monitorSteps.qualityText);
            });
        });
    }
    if (effortSlider) {
        effortSlider.addEventListener('input', () => {
            currentPostCreation.effort = parseInt(effortSlider.value);
            if (effortLevelDisplay) { const levels = ["–ù–∏–∑–∫–æ–µ", "–°—Ä–µ–¥–Ω–µ–µ", "–í—ã—Å–æ–∫–æ–µ"]; effortLevelDisplay.textContent = levels[currentPostCreation.effort - 1]; }
        });
        if (effortLevelDisplay) { const levels = ["–ù–∏–∑–∫–æ–µ", "–°—Ä–µ–¥–Ω–µ–µ", "–í—ã—Å–æ–∫–æ–µ"]; effortLevelDisplay.textContent = levels[parseInt(effortSlider.value) - 1];}
    }
    if (monitorPublishButton) {
        monitorPublishButton.addEventListener('click', () => {
            if (!currentPostCreation.type || (!currentPostCreation.themeId && currentPostCreation.type === 'text' /*–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –≥–¥–µ –µ—Å—Ç—å —Ç–µ–º—ã*/)) {
                logEvent("–û—à–∏–±–∫–∞: –¢–∏–ø –∏–ª–∏ —Ç–µ–º–∞ –ø–æ—Å—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã!", "error"); showMonitorStep(null); return;
            }
            if (currentPostCreation.type === 'text') handlePostAction('text', 1, 5, 2, 10, 1, 5, currentPostCreation.effort, currentPostCreation.themeId);
            else if (currentPostCreation.type === 'meme') handlePostAction('meme', 3, 10, 1, 5, 2, 8, currentPostCreation.effort, currentPostCreation.themeId); // –î–æ–±–∞–≤–∏—Ç—å themeId –µ—Å–ª–∏ –¥–ª—è –º–µ–º–æ–≤ –±—É–¥—É—Ç —Ç–µ–º—ã
            else if (currentPostCreation.type === 'video') handlePostAction('video', 8, 20, 7, 18, 3, 10, currentPostCreation.effort, currentPostCreation.themeId); // –î–æ–±–∞–≤–∏—Ç—å themeId –µ—Å–ª–∏ –¥–ª—è –≤–∏–¥–µ–æ –±—É–¥—É—Ç —Ç–µ–º—ã
            showMonitorStep(null);
        });
    }

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    navButtons.forEach(button => button.addEventListener('click', () => setActiveGameScreen(button.dataset.targetScreen)));
    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ª–æ–≥–∞
    function openModal(modalElement) { /* ... */ } function closeModal(modalElement) { /* ... */ }
    if(openLogButton) openLogButton.addEventListener('click', () => openModal(logModal));
    closeModalButtons.forEach(button => { /* ... */ });
    // –í—Å–ø–ª—ã–≤–∞—é—â–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    function showFeedback(text, isEmoji = false, username = null) { /* ... –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –ø–æ–ª–Ω–æ–º –∫–æ–¥–µ ... */ }
    // –î–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä—ã
    function handlePostAction(postType, baseSubMin, baseSubMax, baseMoneyMin, baseMoneyMax, erMin, erMax, effort, themeId) { /* ... –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –ø–æ–ª–Ω–æ–º –∫–æ–¥–µ ... */ }
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤ (—Ç–µ–ø–µ—Ä—å –Ω–µ –Ω—É–∂–Ω—ã, —Ç.–∫. –ª–æ–≥–∏–∫–∞ –≤ monitorPublishButton)
    // if(postTextButton) ... –∏ —Ç.–¥. - –≠–¢–ò –°–¢–†–û–ö–ò –£–î–ê–õ–ò–¢–¨ –ò–õ–ò –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–¢–¨
    if(upgradeContentQualityButton) upgradeContentQualityButton.addEventListener('click', () => { /* ... –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –ø–æ–ª–Ω–æ–º –∫–æ–¥–µ, –Ω–æ –±–µ–∑ closeModal ... */ });
    if (themeSelectionScreen) { /* ... –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
    
    showTopLevelScreen(preloader);
    setTimeout(() => {
        if (preloader) { preloader.classList.remove('visible'); setTimeout(() => { if(preloader) preloader.style.display = 'none'; }, 700); }
        initializeGameFlow();
    }, 2500); 
    if (startGameButton) { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ, –≤—ã–∑—ã–≤–∞–µ—Ç playCutscene() ... */ }
    if (tg.BackButton) { /* ... –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –ø–æ–ª–Ω–æ–º –∫–æ–¥–µ ... */ }
});
