document.addEventListener('DOMContentLoaded', () => {
    console.log("Script loaded, DOMContentLoaded fired."); // –û–¢–õ–ê–î–ö–ê
    const tg = window.Telegram.WebApp;

    // –≠–∫—Ä–∞–Ω—ã –∏ –æ–≤–µ—Ä–ª–µ–∏
    const preloader = document.getElementById('preloader');
    const themeSelectionScreen = document.getElementById('theme-selection-screen');
    const welcomeScreen = document.getElementById('welcome-screen');
    const cutsceneScreen = document.getElementById('cutscene-screen');
    const studioContainer = document.querySelector('.studio-container'); // –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω
    
    const startGameButton = document.getElementById('start-game-button');
    const cutsceneSlides = cutsceneScreen ? cutsceneScreen.querySelectorAll('.cutscene-slide') : [];
    let currentSlideIndex = 0;
    const telegramUsernameDisplay = document.getElementById('telegram-username-display');
    const userPhotoEl = document.getElementById('user-photo');

    const characterEl = document.getElementById('character-sprite');
    let characterStateTimeout; 

    // –≠–ª–µ–º–µ–Ω—Ç—ã "–°—Ç—É–¥–∏–∏" 
    const channelNameHeaderEl = document.getElementById('channel-name-header'); // ID –∏–∑ –≤–∞—à–µ–≥–æ HTML
    const subscribersCountEl = document.getElementById('subscribers-count');
    const balanceCountEl = document.getElementById('balance-count');
    const audienceMoodDisplay = document.getElementById('audience-mood-display');
    const gameVersionEl = document.getElementById('game-version');

    const currentTrendDisplay = document.getElementById('current-trend-display'); // –ë–∞–Ω–Ω–µ—Ä –≤ studio-main
    const trendDescriptionEl = document.getElementById('trend-description');
    const trendBonusEl = document.getElementById('trend-bonus');
    const trendDurationEl = document.getElementById('trend-duration');

    // –¢—Ä–µ–Ω–¥—ã –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–µ (–µ—Å–ª–∏ –æ–Ω–∏ –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è)
    const channelNameOnMonitorEl = document.getElementById('channel-name-on-monitor');
    const currentTrendDisplayMonitor = document.getElementById('current-trend-display-monitor');
    const trendDescriptionMonitorEl = document.getElementById('trend-description-monitor');

    const createPostButtonMonitor = document.getElementById('create-post-button-monitor');
    const openUpgradesButton = document.getElementById('open-upgrades-button');
    const openLogButton = document.getElementById('open-log-button');
    
    const studioSidePanel = document.getElementById('studio-side-panel'); 
    console.log("studioSidePanel element (global declaration):", studioSidePanel); // –û–¢–õ–ê–î–ö–ê

    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –∏ –∏—Ö —ç–ª–µ–º–µ–Ω—Ç—ã
    const createPostModal = document.getElementById('create-post-modal');
    const upgradesModal = document.getElementById('upgrades-modal');
    const logModal = document.getElementById('log-modal');
    const closeModalButtons = document.querySelectorAll('.close-modal-button');

    // –ö–Ω–æ–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê createPostModal (—Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–µ–º—É index (4).html)
    const postTextButtonModal = document.getElementById('post-text-button'); // –í –≤–∞—à–µ–º HTML ID –±–µ–∑ "-modal"
    const postMemeButtonModal = document.getElementById('post-meme-button');   // –í –≤–∞—à–µ–º HTML ID –±–µ–∑ "-modal"
    const postVideoButtonModal = document.getElementById('post-video-button'); // –í –≤–∞—à–µ–º HTML ID –±–µ–∑ "-modal"
    // –ö–Ω–æ–ø–∫–∞ –≤–Ω—É—Ç—Ä–∏ –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê upgradesModal
    const upgradeContentQualityButtonModal = document.getElementById('upgrade-content-quality'); // –í –≤–∞—à–µ–º HTML ID –±–µ–∑ "-modal"
    
    const eventLogUl = document.getElementById('event-log');

    const liveFeedbackContainer = document.getElementById('live-feedback-container');
    const MAX_FEEDBACK_ITEMS = 7;
    const positiveComments = ["–ö—Ä—É—Ç–æ!", "–õ—É—á—à–∏–π –ø–æ—Å—Ç!", "–û–≥–æ–Ω—å üî•", "–õ—é–±–ª—é!", "–ü–æ–¥–ø–∏—Å–∫–∞!", "üëçüëçüëç", "–ì–µ–Ω–∏–∞–ª—å–Ω–æ!"];
    const neutralComments = ["–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ.", "–ù–µ–ø–ª–æ—Ö–æ.", "–ü–æ–π–¥–µ—Ç.", "–ù–æ—Ä–º.", "ü§î", "–û–∫."];
    const negativeComments = ["–ß—Ç–æ —ç—Ç–æ?", "–°–∫—É—á–Ω–æ.", "–û—Ç–ø–∏—Å–∫–∞.", "üëé", "–ù–µ –ø–æ–Ω—è–ª.", "–£–∂–∞—Å."];
    const reactionEmojis = ['‚ù§Ô∏è', 'üòÇ', 'üéâ', 'ü§Ø', 'üëÄ', 'üíØ'];

    tg.ready();
    tg.expand();

    let defaultGameState = {
        channelName: "–ú–æ–π –ö–∞–Ω–∞–ª", subscribers: 0, balance: 100, engagementRate: 0,
        audienceMood: 75, contentQualityMultiplier: 1, postsMade: 0,
        gameVersion: "0.8.2_debug", // –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        theme: null, themeModifiers: { text: 1, meme: 1, video: 1 },
        currentTrend: null, trendPostsRemaining: 0,
    };
    let gameState = { ...defaultGameState };

    const CHARACTER_STATES = { IDLE_BLINKING: 'idle_blinking', TYPING: 'typing', HAPPY: 'happy', SLEEPING: 'sleeping' };

    function setCharacterState(newState, durationMs = 0) {
        if (!characterEl) return;
        clearTimeout(characterStateTimeout);
        characterEl.className = ''; 
        switch (newState) {
            case CHARACTER_STATES.IDLE_BLINKING: characterEl.classList.add('char-anim-idle-blink'); break;
            case CHARACTER_STATES.TYPING: characterEl.classList.add('char-state-typing'); break;
            case CHARACTER_STATES.HAPPY:
                characterEl.classList.add('char-state-happy');
                if (durationMs > 0) {
                    characterStateTimeout = setTimeout(() => setCharacterState(CHARACTER_STATES.IDLE_BLINKING), durationMs);
                }
                break;
            case CHARACTER_STATES.SLEEPING: characterEl.classList.add('char-state-sleeping'); break;
            default: characterEl.classList.add('char-anim-idle-blink'); break;
        }
    }

    function showScreen(screenElementToShow) {
        console.log("showScreen called for:", screenElementToShow ? screenElementToShow.id : 'null');
        const localStudioSidePanel = document.getElementById('studio-side-panel'); // –ü–æ–ª—É—á–∞–µ–º –∑–¥–µ—Å—å –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        console.log("Side panel in showScreen:", localStudioSidePanel);

        [preloader, themeSelectionScreen, welcomeScreen, cutsceneScreen, studioContainer, createPostModal, upgradesModal, logModal].forEach(el => {
            if (el) { 
                el.classList.remove('visible'); 
                el.style.display = 'none';
            }
        });

        if (localStudioSidePanel) { // –°–Ω–∞—á–∞–ª–∞ –≤—Å–µ–≥–¥–∞ —Å–∫—Ä—ã–≤–∞–µ–º –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
            localStudioSidePanel.style.display = 'none';
        }

        if (screenElementToShow) {
            screenElementToShow.style.display = 'flex'; 
            if (screenElementToShow === studioContainer) {
                 studioContainer.style.flexDirection = 'column'; 
                 studioContainer.style.justifyContent = 'flex-start'; 
                 studioContainer.style.alignItems = 'stretch'; 
                 if(localStudioSidePanel) {
                    localStudioSidePanel.style.display = 'flex'; 
                 } else {
                    console.warn("–≠–ª–µ–º–µ–Ω—Ç #studio-side-panel –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–∫–∞–∑–∞—Ç—å –µ–≥–æ –¥–ª—è —Å—Ç—É–¥–∏–∏.");
                 }
            }
            // –î–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω (createPostModal, upgradesModal, logModal) –±–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å—Ç—É–¥–∏–∏ –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤–∏–¥–∏–º–æ–π, –µ—Å–ª–∏ —Å—Ç—É–¥–∏—è –ø–æ–¥ –Ω–∏–º–∏
            if (screenElementToShow === createPostModal || screenElementToShow === upgradesModal || screenElementToShow === logModal) {
                if(studioContainer && studioContainer.classList.contains('visible') && localStudioSidePanel){ // –ï—Å–ª–∏ —Å—Ç—É–¥–∏—è –≤–∏–¥–∏–º–∞
                     localStudioSidePanel.style.display = 'flex';
                }
            }
            
            requestAnimationFrame(() => { requestAnimationFrame(() => { screenElementToShow.classList.add('visible'); }); });
        }
    }
    
    function playCutscene() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
    function showNextSlide() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
    
    function initializeGameFlow() { 
        const savedState = localStorage.getItem('channelSimGameState_v0.8.2_debug'); 
        if (savedState) { const parsedState = JSON.parse(savedState); gameState = { ...defaultGameState, ...parsedState }; if (gameState.theme) { showWelcomeScreen(); return; } }
        gameState = { ...defaultGameState }; saveGame(); showThemeSelectionScreen();
    }
    function showThemeSelectionScreen() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
    function showWelcomeScreen() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
    function startGameplay() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }

    function loadGame() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ, –Ω–æ –∫–ª—é—á localStorage –∏–∑–º–µ–Ω–µ–Ω ... */ }
    function saveGame() { localStorage.setItem('channelSimGameState_v0.8.2_debug', JSON.stringify(gameState)); }
    function logEvent(message, type = 'info') { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
    function updateUI() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ (—É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ channelNameHeaderEl –µ—Å—Ç—å) ... */ }
    function checkUpgradeButtonStatus() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ (–ø—Ä–æ–≤–µ—Ä—è–µ—Ç upgradeContentQualityButtonModal) ... */ }
    function updateTrendUI() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ (–æ–±–Ω–æ–≤–ª—è–µ—Ç –∏ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–Ω–Ω–µ—Ä, –∏ –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–µ) ... */ }
    function generateNewTrend() { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
    function getThemeDisplayName(themeKey) { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
    function getPostTypeName(typeKey) { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }

    function openModal(modalElement) { 
        // –ü–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –º–æ–¥–∞–ª–∫–∏, —É–±–µ–¥–∏–º—Å—è —á—Ç–æ —Å—Ç—É–¥–∏—è –≤–∏–¥–∏–º–∞ –ø–æ–¥ –Ω–µ–π (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π —ç–∫—Ä–∞–Ω)
        if (studioContainer && !studioContainer.classList.contains('visible') && modalElement !== preloader && modalElement !== themeSelectionScreen && modalElement !== welcomeScreen && modalElement !== cutsceneScreen) {
            showScreen(studioContainer); // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç—É–¥–∏—é, –ø–æ—Ç–æ–º –º–æ–¥–∞–ª–∫—É –ø–æ–≤–µ—Ä—Ö
        }
        if (modalElement) { 
            modalElement.style.display = 'flex'; // –ú–æ–¥–∞–ª–∫–∏ —Ç–æ–∂–µ flex –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            requestAnimationFrame(() => { requestAnimationFrame(() => { modalElement.classList.add('visible'); }); });
        }
    }
    function closeModal(modalElement) { 
        if (modalElement) { 
            modalElement.classList.remove('visible'); 
            setTimeout(() => { modalElement.style.display = 'none'; }, 300); 
            // –ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏, —É–±–µ–¥–∏–º—Å—è —á—Ç–æ —Å—Ç—É–¥–∏—è –≤–∏–¥–∏–º–∞
            if (studioContainer) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ studioContainer
                 showScreen(studioContainer); 
            }
        } 
    }

    if(createPostButtonMonitor) createPostButtonMonitor.addEventListener('click', () => openModal(createPostModal));
    if(openUpgradesButton) openUpgradesButton.addEventListener('click', () => openModal(upgradesModal));
    if(openLogButton) openLogButton.addEventListener('click', () => openModal(logModal));
    closeModalButtons.forEach(button => { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ });

    function showFeedback(text, isEmoji = false, username = null) { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }

    function handlePostAction(postType, baseSubMin, baseSubMax, baseMoneyMin, baseMoneyMax, erMin, erMax) { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }

     // –ò–°–ü–û–õ–¨–ó–£–ï–ú ID –ö–ù–û–ü–û–ö –ò–ó HTML (–±–µ–∑ "-modal" –≤ –∫–æ–Ω—Ü–µ, –µ—Å–ª–∏ —Ç–∞–∫ –≤ HTML)
     if(postTextButtonModal) postTextButtonModal.addEventListener('click', () => handlePostAction('text', 1, 5, 2, 10, 1, 5));
     if(postMemeButtonModal) postMemeButtonModal.addEventListener('click', () => handlePostAction('meme', 3, 10, 1, 5, 2, 8));
     if(postVideoButtonModal) postVideoButtonModal.addEventListener('click', () => handlePostAction('video', 8, 20, 7, 18, 3, 10));
     
     if(upgradeContentQualityButtonModal) upgradeContentQualityButtonModal.addEventListener('click', () => { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ, –Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç upgradeContentQualityButtonModal.textContent ... */ });

    if (themeSelectionScreen) { /* ... –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
    
    // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
    showScreen(preloader); // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—Ä–µ–ª–æ–∞–¥–µ—Ä–∞
    setTimeout(() => {
        if (preloader) { 
            preloader.classList.remove('visible'); 
            setTimeout(() => { if(preloader) preloader.style.display = 'none'; }, 700); 
        }
        initializeGameFlow();
    }, 2500); 

    if (startGameButton) { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ, –≤—ã–∑—ã–≤–∞–µ—Ç playCutscene() ... */ }
    
    if (tg.BackButton) { /* ... –∫–∞–∫ —Ä–∞–Ω—å—à–µ ... */ }
});
